
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightMINUSAND COLON COMMA COMP_OP DEDENT DEF DIVIDE ELIF ELSE EOL EQUALS FALSE FOR FROM IDENTIFIER IF IMPORT IN INDENT MINUS NOT NUMBER OR PARENL PARENR PASS PLUS POWER PRINT STRING TIMES TRUE WHILE YIELDprogram : statementliststatementlist : statementstatementlist : statement statementlistblock : INDENT statementlist DEDENTstatement : EOLstatement : print_statementstatement : fullexpressionstatement : while_statementstatement : if_statementstatement : for_statementstatement : import_statementstatement : def_statementstatement : yield_statementstatement : assignment_statementstatement : pass_statementfullexpression : or_expressionor_expression : and_expressionor_expression : and_expression OR or_expressionand_expression : not_expressionand_expression  : not_expression AND not_expressionnot_expression : comparisonnot_expression : NOT not_expressioncomparison : expressioncomparison : expression COMP_OP expressionwhile_statement : WHILE fullexpression COLON EOL blockif_statement : IF fullexpression COLON EOL blockif_statement : IF fullexpression COLON EOL block if_trailerif_trailer : elif_clauseselif_clauses : elif_clauseelif_clauses : elif_clause if_trailerif_trailer : else_clauseelif_clause : ELIF fullexpression COLON EOL blockelse_clause : ELSE COLON EOL blockprint_statement : PRINT fullexpressionpass_statement : PASSyield_statement : YIELD fullexpressionassignment_statement : identifier EQUALS fullexpressionimport_statement : FROM identifier IMPORT identifierimport_statement : IMPORT identifierfor_statement : FOR identifier IN fullexpression COLON EOL blockdef_statement : DEF identifier PARENL PARENR COLON EOL blockdef_statement : DEF identifier PARENL ident_list PARENR COLON EOL blockexpression : arith_expressionexpression : arith_expression TIMES expression\n                      | arith_expression DIVIDE expression\n                      | arith_expression POWER expressionarith_expression : expression_atomarith_expression : expression_atom PLUS arith_expression\n                            | expression_atom MINUS arith_expressionexpression_atom : numberexpression_atom : identifierexpression_atom : stringexpression_atom : booleanexpression_atom : func_callexpression_atom : PARENL fullexpression PARENRfunc_call : IDENTIFIER PARENL PARENRfunc_call : IDENTIFIER PARENL expr_list PARENRnumber : NUMBERnumber : MINUS numberstring : STRINGboolean : TRUE\n                   | FALSEidentifier : IDENTIFIERexpr_list : expression expr_list : expression COMMA expr_listident_list : identifierident_list : identifier COMMA ident_list'
    
_lr_action_items = {'DEDENT':([1,2,3,5,6,8,10,13,14,15,16,18,19,21,22,23,24,25,26,28,29,31,32,35,36,38,39,40,41,43,45,49,50,51,54,55,57,66,69,70,71,73,76,78,80,82,83,84,85,91,94,96,102,103,109,111,112,113,114,115,117,119,121,125,126,],[-52,-35,-50,-5,-6,-43,-61,-7,-14,-62,-8,-17,-2,-60,-9,-13,-54,-10,-11,-21,-58,-63,-12,-16,-51,-19,-15,-47,-53,-23,-51,-34,-59,-63,-3,-39,-36,-22,-45,-46,-44,-18,-56,-55,-37,-20,-48,-49,-24,-57,-38,-25,-26,114,-29,-31,-27,-28,-4,-41,-40,-30,-42,-33,-32,]),'ELIF':([102,109,114,126,],[108,108,-4,-32,]),'PASS':([0,1,2,3,5,6,8,10,13,14,15,16,18,19,21,22,23,24,25,26,28,29,31,32,35,36,38,39,40,41,43,45,49,50,51,55,57,66,69,70,71,73,76,78,80,82,83,84,85,91,94,95,96,102,109,111,112,113,114,115,117,119,121,125,126,],[2,-52,-35,-50,-5,-6,-43,-61,-7,-14,-62,-8,-17,2,-60,-9,-13,-54,-10,-11,-21,-58,-63,-12,-16,-51,-19,-15,-47,-53,-23,-51,-34,-59,-63,-39,-36,-22,-45,-46,-44,-18,-56,-55,-37,-20,-48,-49,-24,-57,-38,2,-25,-26,-29,-31,-27,-28,-4,-41,-40,-30,-42,-33,-32,]),'NUMBER':([0,1,2,3,5,6,7,8,9,10,11,13,14,15,16,18,19,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,55,57,58,61,63,64,65,66,67,69,70,71,73,74,76,78,80,82,83,84,85,91,92,94,95,96,102,108,109,111,112,113,114,115,117,119,121,125,126,],[29,-52,-35,-50,-5,-6,29,-43,29,-61,29,-7,-14,-62,-8,-17,29,-60,-9,-13,-54,-10,-11,-21,-58,29,-63,-12,29,29,-16,-51,-19,-15,-47,-53,29,-23,-51,29,29,29,-34,-59,-63,29,-39,-36,29,29,29,29,29,-22,29,-45,-46,-44,-18,29,-56,-55,-37,-20,-48,-49,-24,-57,29,-38,29,-25,-26,29,-29,-31,-27,-28,-4,-41,-40,-30,-42,-33,-32,]),'EOL':([0,1,2,3,5,6,8,10,13,14,15,16,18,19,21,22,23,24,25,26,28,29,31,32,35,36,38,39,40,41,43,45,49,50,51,55,57,66,68,69,70,71,73,76,78,79,80,82,83,84,85,91,94,95,96,97,100,102,106,109,111,112,113,114,115,117,119,120,121,122,125,126,],[5,-52,-35,-50,-5,-6,-43,-61,-7,-14,-62,-8,-17,5,-60,-9,-13,-54,-10,-11,-21,-58,-63,-12,-16,-51,-19,-15,-47,-53,-23,-51,-34,-59,-63,-39,-36,-22,86,-45,-46,-44,-18,-56,-55,93,-37,-20,-48,-49,-24,-57,-38,5,-25,104,107,-26,116,-29,-31,-27,-28,-4,-41,-40,-30,123,-42,124,-33,-32,]),'WHILE':([0,1,2,3,5,6,8,10,13,14,15,16,18,19,21,22,23,24,25,26,28,29,31,32,35,36,38,39,40,41,43,45,49,50,51,55,57,66,69,70,71,73,76,78,80,82,83,84,85,91,94,95,96,102,109,111,112,113,114,115,117,119,121,125,126,],[7,-52,-35,-50,-5,-6,-43,-61,-7,-14,-62,-8,-17,7,-60,-9,-13,-54,-10,-11,-21,-58,-63,-12,-16,-51,-19,-15,-47,-53,-23,-51,-34,-59,-63,-39,-36,-22,-45,-46,-44,-18,-56,-55,-37,-20,-48,-49,-24,-57,-38,7,-25,-26,-29,-31,-27,-28,-4,-41,-40,-30,-42,-33,-32,]),'PRINT':([0,1,2,3,5,6,8,10,13,14,15,16,18,19,21,22,23,24,25,26,28,29,31,32,35,36,38,39,40,41,43,45,49,50,51,55,57,66,69,70,71,73,76,78,80,82,83,84,85,91,94,95,96,102,109,111,112,113,114,115,117,119,121,125,126,],[9,-52,-35,-50,-5,-6,-43,-61,-7,-14,-62,-8,-17,9,-60,-9,-13,-54,-10,-11,-21,-58,-63,-12,-16,-51,-19,-15,-47,-53,-23,-51,-34,-59,-63,-39,-36,-22,-45,-46,-44,-18,-56,-55,-37,-20,-48,-49,-24,-57,-38,9,-25,-26,-29,-31,-27,-28,-4,-41,-40,-30,-42,-33,-32,]),'TRUE':([0,1,2,3,5,6,7,8,9,10,13,14,15,16,18,19,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,55,57,58,61,63,64,65,66,67,69,70,71,73,74,76,78,80,82,83,84,85,91,92,94,95,96,102,108,109,111,112,113,114,115,117,119,121,125,126,],[10,-52,-35,-50,-5,-6,10,-43,10,-61,-7,-14,-62,-8,-17,10,-60,-9,-13,-54,-10,-11,-21,-58,10,-63,-12,10,10,-16,-51,-19,-15,-47,-53,10,-23,-51,10,10,10,-34,-59,-63,10,-39,-36,10,10,10,10,10,-22,10,-45,-46,-44,-18,10,-56,-55,-37,-20,-48,-49,-24,-57,10,-38,10,-25,-26,10,-29,-31,-27,-28,-4,-41,-40,-30,-42,-33,-32,]),'MINUS':([0,1,2,3,5,6,7,8,9,10,11,13,14,15,16,18,19,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,55,57,58,61,63,64,65,66,67,69,70,71,73,74,76,78,80,82,83,84,85,91,92,94,95,96,102,108,109,111,112,113,114,115,117,119,121,125,126,],[11,-52,-35,-50,-5,-6,11,-43,11,-61,11,-7,-14,-62,-8,-17,11,-60,-9,-13,-54,-10,-11,-21,-58,11,-63,-12,11,11,-16,-51,-19,-15,65,-53,11,-23,-51,11,11,11,-34,-59,-63,11,-39,-36,11,11,11,11,11,-22,11,-45,-46,-44,-18,11,-56,-55,-37,-20,-48,-49,-24,-57,11,-38,11,-25,-26,11,-29,-31,-27,-28,-4,-41,-40,-30,-42,-33,-32,]),'DEF':([0,1,2,3,5,6,8,10,13,14,15,16,18,19,21,22,23,24,25,26,28,29,31,32,35,36,38,39,40,41,43,45,49,50,51,55,57,66,69,70,71,73,76,78,80,82,83,84,85,91,94,95,96,102,109,111,112,113,114,115,117,119,121,125,126,],[12,-52,-35,-50,-5,-6,-43,-61,-7,-14,-62,-8,-17,12,-60,-9,-13,-54,-10,-11,-21,-58,-63,-12,-16,-51,-19,-15,-47,-53,-23,-51,-34,-59,-63,-39,-36,-22,-45,-46,-44,-18,-56,-55,-37,-20,-48,-49,-24,-57,-38,12,-25,-26,-29,-31,-27,-28,-4,-41,-40,-30,-42,-33,-32,]),'DIVIDE':([1,3,8,10,15,21,24,29,31,36,40,41,45,50,76,78,83,84,91,],[-52,-50,46,-61,-62,-60,-54,-58,-63,-51,-47,-53,-51,-59,-56,-55,-48,-49,-57,]),'POWER':([1,3,8,10,15,21,24,29,31,36,40,41,45,50,76,78,83,84,91,],[-52,-50,47,-61,-62,-60,-54,-58,-63,-51,-47,-53,-51,-59,-56,-55,-48,-49,-57,]),'PLUS':([1,3,10,15,21,24,29,31,36,40,41,45,50,76,78,91,],[-52,-50,-61,-62,-60,-54,-58,-63,-51,64,-53,-51,-59,-56,-55,-57,]),'COLON':([1,3,8,10,15,18,21,24,28,29,31,35,38,40,41,43,44,45,50,60,66,69,70,71,73,76,78,82,83,84,85,87,90,91,99,110,118,],[-52,-50,-43,-61,-62,-17,-60,-54,-21,-58,-63,-16,-19,-47,-53,-23,68,-51,-59,79,-22,-45,-46,-44,-18,-56,-55,-20,-48,-49,-24,97,100,-57,106,120,122,]),'IN':([51,56,],[-63,74,]),'IDENTIFIER':([0,1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,53,55,57,58,61,63,64,65,66,67,69,70,71,72,73,74,76,78,80,81,82,83,84,85,91,92,94,95,96,98,102,108,109,111,112,113,114,115,117,119,121,125,126,],[31,-52,-35,-50,-5,-6,31,-43,31,-61,51,-7,-14,-62,-8,-17,31,51,-60,-9,-13,-54,-10,-11,51,-21,-58,31,-63,-12,31,31,-16,-51,51,-19,-15,-47,-53,31,-23,-51,31,31,31,-34,-59,-63,31,-39,-36,31,31,31,31,31,-22,31,-45,-46,-44,51,-18,31,-56,-55,-37,51,-20,-48,-49,-24,-57,31,-38,31,-25,51,-26,31,-29,-31,-27,-28,-4,-41,-40,-30,-42,-33,-32,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expr_list':([58,92,],[75,101,]),'number':([0,7,9,11,19,30,33,34,42,46,47,48,53,58,61,63,64,65,67,74,92,95,108,],[3,3,3,50,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'statementlist':([0,19,95,],[4,54,103,]),'arith_expression':([0,7,9,19,30,33,34,42,46,47,48,53,58,61,63,64,65,67,74,92,95,108,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,83,84,8,8,8,8,8,]),'print_statement':([0,19,95,],[6,6,6,]),'and_expression':([0,7,9,19,30,33,34,53,61,74,95,108,],[18,18,18,18,18,18,18,18,18,18,18,18,]),'expression_atom':([0,7,9,19,30,33,34,42,46,47,48,53,58,61,63,64,65,67,74,92,95,108,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'pass_statement':([0,19,95,],[39,39,39,]),'assignment_statement':([0,19,95,],[14,14,14,]),'while_statement':([0,19,95,],[16,16,16,]),'program':([0,],[17,]),'statement':([0,19,95,],[19,19,19,]),'if_statement':([0,19,95,],[22,22,22,]),'yield_statement':([0,19,95,],[23,23,23,]),'for_statement':([0,19,95,],[25,25,25,]),'import_statement':([0,19,95,],[26,26,26,]),'comparison':([0,7,9,19,30,33,34,42,53,61,63,74,95,108,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'else_clause':([102,109,],[111,111,]),'def_statement':([0,19,95,],[32,32,32,]),'elif_clause':([102,109,],[109,109,]),'string':([0,7,9,19,30,33,34,42,46,47,48,53,58,61,63,64,65,67,74,92,95,108,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'ident_list':([72,98,],[89,105,]),'func_call':([0,7,9,19,30,33,34,42,46,47,48,53,58,61,63,64,65,67,74,92,95,108,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'or_expression':([0,7,9,19,30,33,34,53,61,74,95,108,],[35,35,35,35,35,35,35,73,35,35,35,35,]),'if_trailer':([102,109,],[112,119,]),'not_expression':([0,7,9,19,30,33,34,42,53,61,63,74,95,108,],[38,38,38,38,38,38,38,66,38,38,82,38,38,38,]),'fullexpression':([0,7,9,19,30,33,34,61,74,95,108,],[13,44,49,13,57,59,60,80,90,13,118,]),'boolean':([0,7,9,19,30,33,34,42,46,47,48,53,58,61,63,64,65,67,74,92,95,108,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'identifier':([0,7,9,12,19,20,27,30,33,34,37,42,46,47,48,53,58,61,63,64,65,67,72,74,81,92,95,98,108,],[36,45,45,52,36,55,56,45,45,45,62,45,45,45,45,45,45,45,45,45,45,45,88,45,94,45,36,88,45,]),'expression':([0,7,9,19,30,33,34,42,46,47,48,53,58,61,63,67,74,92,95,108,],[43,43,43,43,43,43,43,43,69,70,71,43,77,43,43,85,43,77,43,43,]),'elif_clauses':([102,109,],[113,113,]),'block':([86,93,104,107,116,123,124,],[96,102,115,117,121,125,126,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statementlist','program',1,'p_program1','lexer_parser.py',218),
  ('statementlist -> statement','statementlist',1,'p_statementlist_1','lexer_parser.py',222),
  ('statementlist -> statement statementlist','statementlist',2,'p_statementlist_2','lexer_parser.py',230),
  ('block -> INDENT statementlist DEDENT','block',3,'p_block_2','lexer_parser.py',252),
  ('statement -> EOL','statement',1,'p_statement_0','lexer_parser.py',262),
  ('statement -> print_statement','statement',1,'p_statement_1','lexer_parser.py',266),
  ('statement -> fullexpression','statement',1,'p_statement_2','lexer_parser.py',270),
  ('statement -> while_statement','statement',1,'p_statement_4','lexer_parser.py',274),
  ('statement -> if_statement','statement',1,'p_statement_5','lexer_parser.py',278),
  ('statement -> for_statement','statement',1,'p_statement_6','lexer_parser.py',282),
  ('statement -> import_statement','statement',1,'p_statement_7','lexer_parser.py',286),
  ('statement -> def_statement','statement',1,'p_statement_8','lexer_parser.py',290),
  ('statement -> yield_statement','statement',1,'p_statement_9','lexer_parser.py',294),
  ('statement -> assignment_statement','statement',1,'p_statement_10','lexer_parser.py',298),
  ('statement -> pass_statement','statement',1,'p_statement_11','lexer_parser.py',302),
  ('fullexpression -> or_expression','fullexpression',1,'p_fullexpression_1','lexer_parser.py',309),
  ('or_expression -> and_expression','or_expression',1,'p_fullexpression_2','lexer_parser.py',313),
  ('or_expression -> and_expression OR or_expression','or_expression',3,'p_fullexpression_3','lexer_parser.py',317),
  ('and_expression -> not_expression','and_expression',1,'p_fullexpression_4','lexer_parser.py',321),
  ('and_expression -> not_expression AND not_expression','and_expression',3,'p_fullexpression_5','lexer_parser.py',325),
  ('not_expression -> comparison','not_expression',1,'p_fullexpression_6','lexer_parser.py',329),
  ('not_expression -> NOT not_expression','not_expression',2,'p_fullexpression_7','lexer_parser.py',333),
  ('comparison -> expression','comparison',1,'p_fullexpression_8','lexer_parser.py',338),
  ('comparison -> expression COMP_OP expression','comparison',3,'p_fullexpression_9','lexer_parser.py',342),
  ('while_statement -> WHILE fullexpression COLON EOL block','while_statement',5,'p_while_statement_1','lexer_parser.py',357),
  ('if_statement -> IF fullexpression COLON EOL block','if_statement',5,'p_if_statement_1','lexer_parser.py',377),
  ('if_statement -> IF fullexpression COLON EOL block if_trailer','if_statement',6,'p_if_statement_2','lexer_parser.py',381),
  ('if_trailer -> elif_clauses','if_trailer',1,'p_if_trailer_1','lexer_parser.py',385),
  ('elif_clauses -> elif_clause','elif_clauses',1,'p_elif_clauses_1','lexer_parser.py',389),
  ('elif_clauses -> elif_clause if_trailer','elif_clauses',2,'p_elif_clauses_2','lexer_parser.py',393),
  ('if_trailer -> else_clause','if_trailer',1,'p_if_trailer_2','lexer_parser.py',397),
  ('elif_clause -> ELIF fullexpression COLON EOL block','elif_clause',5,'p_elif_clause_1','lexer_parser.py',401),
  ('else_clause -> ELSE COLON EOL block','else_clause',4,'p_else_clause_1','lexer_parser.py',405),
  ('print_statement -> PRINT fullexpression','print_statement',2,'p_print_statement_1','lexer_parser.py',412),
  ('pass_statement -> PASS','pass_statement',1,'p_pass_statement_1','lexer_parser.py',419),
  ('yield_statement -> YIELD fullexpression','yield_statement',2,'p_yield_statement_1','lexer_parser.py',426),
  ('assignment_statement -> identifier EQUALS fullexpression','assignment_statement',3,'p_assignment_statement_1','lexer_parser.py',433),
  ('import_statement -> FROM identifier IMPORT identifier','import_statement',4,'p_import_statement_1','lexer_parser.py',440),
  ('import_statement -> IMPORT identifier','import_statement',2,'p_import_statement_2','lexer_parser.py',444),
  ('for_statement -> FOR identifier IN fullexpression COLON EOL block','for_statement',7,'p_for_statement_1','lexer_parser.py',451),
  ('def_statement -> DEF identifier PARENL PARENR COLON EOL block','def_statement',7,'p_def_statement_1','lexer_parser.py',458),
  ('def_statement -> DEF identifier PARENL ident_list PARENR COLON EOL block','def_statement',8,'p_def_statement_2','lexer_parser.py',462),
  ('expression -> arith_expression','expression',1,'p_expression_1','lexer_parser.py',471),
  ('expression -> arith_expression TIMES expression','expression',3,'p_expression_3','lexer_parser.py',480),
  ('expression -> arith_expression DIVIDE expression','expression',3,'p_expression_3','lexer_parser.py',481),
  ('expression -> arith_expression POWER expression','expression',3,'p_expression_3','lexer_parser.py',482),
  ('arith_expression -> expression_atom','arith_expression',1,'p_expression_4','lexer_parser.py',486),
  ('arith_expression -> expression_atom PLUS arith_expression','arith_expression',3,'p_expression_5','lexer_parser.py',490),
  ('arith_expression -> expression_atom MINUS arith_expression','arith_expression',3,'p_expression_5','lexer_parser.py',491),
  ('expression_atom -> number','expression_atom',1,'p_expressionatom_1','lexer_parser.py',500),
  ('expression_atom -> identifier','expression_atom',1,'p_expressionatom_2','lexer_parser.py',504),
  ('expression_atom -> string','expression_atom',1,'p_expressionatom_3','lexer_parser.py',508),
  ('expression_atom -> boolean','expression_atom',1,'p_expressionatom_4','lexer_parser.py',512),
  ('expression_atom -> func_call','expression_atom',1,'p_expressionatom_5','lexer_parser.py',516),
  ('expression_atom -> PARENL fullexpression PARENR','expression_atom',3,'p_expressionatom_6','lexer_parser.py',521),
  ('func_call -> IDENTIFIER PARENL PARENR','func_call',3,'p_func_call1','lexer_parser.py',526),
  ('func_call -> IDENTIFIER PARENL expr_list PARENR','func_call',4,'p_func_call2','lexer_parser.py',530),
  ('number -> NUMBER','number',1,'p_number_1','lexer_parser.py',534),
  ('number -> MINUS number','number',2,'p_number_2','lexer_parser.py',538),
  ('string -> STRING','string',1,'p_string_1','lexer_parser.py',542),
  ('boolean -> TRUE','boolean',1,'p_boolean','lexer_parser.py',550),
  ('boolean -> FALSE','boolean',1,'p_boolean','lexer_parser.py',551),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','lexer_parser.py',555),
  ('expr_list -> expression','expr_list',1,'p_expr_list1','lexer_parser.py',562),
  ('expr_list -> expression COMMA expr_list','expr_list',3,'p_expr_list2','lexer_parser.py',566),
  ('ident_list -> identifier','ident_list',1,'p_ident_list1','lexer_parser.py',570),
  ('ident_list -> identifier COMMA ident_list','ident_list',3,'p_ident_list2','lexer_parser.py',574),
]
