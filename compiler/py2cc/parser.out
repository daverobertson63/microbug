Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statementlist
Rule 2     statementlist -> statement
Rule 3     statementlist -> statement statementlist
Rule 4     block -> INDENT statementlist DEDENT
Rule 5     statement -> EOL
Rule 6     statement -> print_statement
Rule 7     statement -> fullexpression
Rule 8     statement -> while_statement
Rule 9     statement -> if_statement
Rule 10    statement -> for_statement
Rule 11    statement -> import_statement
Rule 12    statement -> def_statement
Rule 13    statement -> yield_statement
Rule 14    statement -> assignment_statement
Rule 15    statement -> pass_statement
Rule 16    fullexpression -> or_expression
Rule 17    or_expression -> and_expression
Rule 18    or_expression -> and_expression OR or_expression
Rule 19    and_expression -> not_expression
Rule 20    and_expression -> not_expression AND not_expression
Rule 21    not_expression -> comparison
Rule 22    not_expression -> NOT not_expression
Rule 23    comparison -> expression
Rule 24    comparison -> expression COMP_OP expression
Rule 25    while_statement -> WHILE fullexpression COLON EOL block
Rule 26    if_statement -> IF fullexpression COLON EOL block
Rule 27    if_statement -> IF fullexpression COLON EOL block if_trailer
Rule 28    if_trailer -> elif_clauses
Rule 29    elif_clauses -> elif_clause
Rule 30    elif_clauses -> elif_clause if_trailer
Rule 31    if_trailer -> else_clause
Rule 32    elif_clause -> ELIF fullexpression COLON EOL block
Rule 33    else_clause -> ELSE COLON EOL block
Rule 34    print_statement -> PRINT fullexpression
Rule 35    pass_statement -> PASS
Rule 36    yield_statement -> YIELD fullexpression
Rule 37    assignment_statement -> identifier EQUALS fullexpression
Rule 38    import_statement -> FROM identifier IMPORT identifier
Rule 39    import_statement -> IMPORT identifier
Rule 40    for_statement -> FOR identifier IN fullexpression COLON EOL block
Rule 41    def_statement -> DEF identifier PARENL PARENR COLON EOL block
Rule 42    def_statement -> DEF identifier PARENL ident_list PARENR COLON EOL block
Rule 43    expression -> arith_expression
Rule 44    expression -> arith_expression TIMES expression
Rule 45    expression -> arith_expression DIVIDE expression
Rule 46    expression -> arith_expression POWER expression
Rule 47    arith_expression -> expression_atom
Rule 48    arith_expression -> expression_atom PLUS arith_expression
Rule 49    arith_expression -> expression_atom MINUS arith_expression
Rule 50    expression_atom -> number
Rule 51    expression_atom -> identifier
Rule 52    expression_atom -> string
Rule 53    expression_atom -> boolean
Rule 54    expression_atom -> func_call
Rule 55    expression_atom -> PARENL fullexpression PARENR
Rule 56    func_call -> IDENTIFIER PARENL PARENR
Rule 57    func_call -> IDENTIFIER PARENL expr_list PARENR
Rule 58    number -> NUMBER
Rule 59    number -> MINUS number
Rule 60    string -> STRING
Rule 61    boolean -> TRUE
Rule 62    boolean -> FALSE
Rule 63    identifier -> IDENTIFIER
Rule 64    expr_list -> expression
Rule 65    expr_list -> expression COMMA expr_list
Rule 66    ident_list -> identifier
Rule 67    ident_list -> identifier COMMA ident_list

Terminals, with rules where they appear

AND                  : 20
COLON                : 25 26 27 32 33 40 41 42
COMMA                : 65 67
COMP_OP              : 24
DEDENT               : 4
DEF                  : 41 42
DIVIDE               : 45
ELIF                 : 32
ELSE                 : 33
EOL                  : 5 25 26 27 32 33 40 41 42
EQUALS               : 37
FALSE                : 62
FOR                  : 40
FROM                 : 38
IDENTIFIER           : 56 57 63
IF                   : 26 27
IMPORT               : 38 39
IN                   : 40
INDENT               : 4
MINUS                : 49 59
NOT                  : 22
NUMBER               : 58
OR                   : 18
PARENL               : 41 42 55 56 57
PARENR               : 41 42 55 56 57
PASS                 : 35
PLUS                 : 48
POWER                : 46
PRINT                : 34
STRING               : 60
TIMES                : 44
TRUE                 : 61
WHILE                : 25
YIELD                : 36
error                : 

Nonterminals, with rules where they appear

and_expression       : 17 18
arith_expression     : 43 44 45 46 48 49
assignment_statement : 14
block                : 25 26 27 32 33 40 41 42
boolean              : 53
comparison           : 21
def_statement        : 12
elif_clause          : 29 30
elif_clauses         : 28
else_clause          : 31
expr_list            : 57 65
expression           : 23 24 24 44 45 46 64 65
expression_atom      : 47 48 49
for_statement        : 10
fullexpression       : 7 25 26 27 32 34 36 37 40 55
func_call            : 54
ident_list           : 42 67
identifier           : 37 38 38 39 40 41 42 51 66 67
if_statement         : 9
if_trailer           : 27 30
import_statement     : 11
not_expression       : 19 20 20 22
number               : 50 59
or_expression        : 16 18
pass_statement       : 15
print_statement      : 6
program              : 0
statement            : 2 3
statementlist        : 1 3 4
string               : 52
while_statement      : 8
yield_statement      : 13

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statementlist
    (2) statementlist -> . statement
    (3) statementlist -> . statement statementlist
    (5) statement -> . EOL
    (6) statement -> . print_statement
    (7) statement -> . fullexpression
    (8) statement -> . while_statement
    (9) statement -> . if_statement
    (10) statement -> . for_statement
    (11) statement -> . import_statement
    (12) statement -> . def_statement
    (13) statement -> . yield_statement
    (14) statement -> . assignment_statement
    (15) statement -> . pass_statement
    (34) print_statement -> . PRINT fullexpression
    (16) fullexpression -> . or_expression
    (25) while_statement -> . WHILE fullexpression COLON EOL block
    (26) if_statement -> . IF fullexpression COLON EOL block
    (27) if_statement -> . IF fullexpression COLON EOL block if_trailer
    (40) for_statement -> . FOR identifier IN fullexpression COLON EOL block
    (38) import_statement -> . FROM identifier IMPORT identifier
    (39) import_statement -> . IMPORT identifier
    (41) def_statement -> . DEF identifier PARENL PARENR COLON EOL block
    (42) def_statement -> . DEF identifier PARENL ident_list PARENR COLON EOL block
    (36) yield_statement -> . YIELD fullexpression
    (37) assignment_statement -> . identifier EQUALS fullexpression
    (35) pass_statement -> . PASS
    (17) or_expression -> . and_expression
    (18) or_expression -> . and_expression OR or_expression
    (63) identifier -> . IDENTIFIER
    (19) and_expression -> . not_expression
    (20) and_expression -> . not_expression AND not_expression
    (21) not_expression -> . comparison
    (22) not_expression -> . NOT not_expression
    (23) comparison -> . expression
    (24) comparison -> . expression COMP_OP expression
    (43) expression -> . arith_expression
    (44) expression -> . arith_expression TIMES expression
    (45) expression -> . arith_expression DIVIDE expression
    (46) expression -> . arith_expression POWER expression
    (47) arith_expression -> . expression_atom
    (48) arith_expression -> . expression_atom PLUS arith_expression
    (49) arith_expression -> . expression_atom MINUS arith_expression
    (50) expression_atom -> . number
    (51) expression_atom -> . identifier
    (52) expression_atom -> . string
    (53) expression_atom -> . boolean
    (54) expression_atom -> . func_call
    (55) expression_atom -> . PARENL fullexpression PARENR
    (58) number -> . NUMBER
    (59) number -> . MINUS number
    (60) string -> . STRING
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (56) func_call -> . IDENTIFIER PARENL PARENR
    (57) func_call -> . IDENTIFIER PARENL expr_list PARENR

    EOL             shift and go to state 5
    PRINT           shift and go to state 9
    WHILE           shift and go to state 7
    IF              shift and go to state 34
    FOR             shift and go to state 27
    FROM            shift and go to state 37
    IMPORT          shift and go to state 20
    DEF             shift and go to state 12
    YIELD           shift and go to state 30
    PASS            shift and go to state 2
    IDENTIFIER      shift and go to state 31
    NOT             shift and go to state 42
    PARENL          shift and go to state 33
    NUMBER          shift and go to state 29
    MINUS           shift and go to state 11
    STRING          shift and go to state 21
    TRUE            shift and go to state 10
    FALSE           shift and go to state 15

    number                         shift and go to state 3
    statementlist                  shift and go to state 4
    arith_expression               shift and go to state 8
    print_statement                shift and go to state 6
    and_expression                 shift and go to state 18
    expression_atom                shift and go to state 40
    fullexpression                 shift and go to state 13
    assignment_statement           shift and go to state 14
    while_statement                shift and go to state 16
    program                        shift and go to state 17
    statement                      shift and go to state 19
    if_statement                   shift and go to state 22
    yield_statement                shift and go to state 23
    for_statement                  shift and go to state 25
    import_statement               shift and go to state 26
    comparison                     shift and go to state 28
    def_statement                  shift and go to state 32
    string                         shift and go to state 1
    func_call                      shift and go to state 24
    or_expression                  shift and go to state 35
    identifier                     shift and go to state 36
    not_expression                 shift and go to state 38
    pass_statement                 shift and go to state 39
    boolean                        shift and go to state 41
    expression                     shift and go to state 43

state 1

    (52) expression_atom -> string .

    PLUS            reduce using rule 52 (expression_atom -> string .)
    MINUS           reduce using rule 52 (expression_atom -> string .)
    TIMES           reduce using rule 52 (expression_atom -> string .)
    DIVIDE          reduce using rule 52 (expression_atom -> string .)
    POWER           reduce using rule 52 (expression_atom -> string .)
    COMP_OP         reduce using rule 52 (expression_atom -> string .)
    AND             reduce using rule 52 (expression_atom -> string .)
    OR              reduce using rule 52 (expression_atom -> string .)
    EOL             reduce using rule 52 (expression_atom -> string .)
    PRINT           reduce using rule 52 (expression_atom -> string .)
    WHILE           reduce using rule 52 (expression_atom -> string .)
    IF              reduce using rule 52 (expression_atom -> string .)
    FOR             reduce using rule 52 (expression_atom -> string .)
    FROM            reduce using rule 52 (expression_atom -> string .)
    IMPORT          reduce using rule 52 (expression_atom -> string .)
    DEF             reduce using rule 52 (expression_atom -> string .)
    YIELD           reduce using rule 52 (expression_atom -> string .)
    PASS            reduce using rule 52 (expression_atom -> string .)
    IDENTIFIER      reduce using rule 52 (expression_atom -> string .)
    NOT             reduce using rule 52 (expression_atom -> string .)
    PARENL          reduce using rule 52 (expression_atom -> string .)
    NUMBER          reduce using rule 52 (expression_atom -> string .)
    STRING          reduce using rule 52 (expression_atom -> string .)
    TRUE            reduce using rule 52 (expression_atom -> string .)
    FALSE           reduce using rule 52 (expression_atom -> string .)
    DEDENT          reduce using rule 52 (expression_atom -> string .)
    COLON           reduce using rule 52 (expression_atom -> string .)
    $end            reduce using rule 52 (expression_atom -> string .)
    PARENR          reduce using rule 52 (expression_atom -> string .)
    COMMA           reduce using rule 52 (expression_atom -> string .)


state 2

    (35) pass_statement -> PASS .

    EOL             reduce using rule 35 (pass_statement -> PASS .)
    PRINT           reduce using rule 35 (pass_statement -> PASS .)
    WHILE           reduce using rule 35 (pass_statement -> PASS .)
    IF              reduce using rule 35 (pass_statement -> PASS .)
    FOR             reduce using rule 35 (pass_statement -> PASS .)
    FROM            reduce using rule 35 (pass_statement -> PASS .)
    IMPORT          reduce using rule 35 (pass_statement -> PASS .)
    DEF             reduce using rule 35 (pass_statement -> PASS .)
    YIELD           reduce using rule 35 (pass_statement -> PASS .)
    PASS            reduce using rule 35 (pass_statement -> PASS .)
    IDENTIFIER      reduce using rule 35 (pass_statement -> PASS .)
    NOT             reduce using rule 35 (pass_statement -> PASS .)
    PARENL          reduce using rule 35 (pass_statement -> PASS .)
    NUMBER          reduce using rule 35 (pass_statement -> PASS .)
    MINUS           reduce using rule 35 (pass_statement -> PASS .)
    STRING          reduce using rule 35 (pass_statement -> PASS .)
    TRUE            reduce using rule 35 (pass_statement -> PASS .)
    FALSE           reduce using rule 35 (pass_statement -> PASS .)
    DEDENT          reduce using rule 35 (pass_statement -> PASS .)
    $end            reduce using rule 35 (pass_statement -> PASS .)


state 3

    (50) expression_atom -> number .

    PLUS            reduce using rule 50 (expression_atom -> number .)
    MINUS           reduce using rule 50 (expression_atom -> number .)
    TIMES           reduce using rule 50 (expression_atom -> number .)
    DIVIDE          reduce using rule 50 (expression_atom -> number .)
    POWER           reduce using rule 50 (expression_atom -> number .)
    COMP_OP         reduce using rule 50 (expression_atom -> number .)
    AND             reduce using rule 50 (expression_atom -> number .)
    OR              reduce using rule 50 (expression_atom -> number .)
    EOL             reduce using rule 50 (expression_atom -> number .)
    PRINT           reduce using rule 50 (expression_atom -> number .)
    WHILE           reduce using rule 50 (expression_atom -> number .)
    IF              reduce using rule 50 (expression_atom -> number .)
    FOR             reduce using rule 50 (expression_atom -> number .)
    FROM            reduce using rule 50 (expression_atom -> number .)
    IMPORT          reduce using rule 50 (expression_atom -> number .)
    DEF             reduce using rule 50 (expression_atom -> number .)
    YIELD           reduce using rule 50 (expression_atom -> number .)
    PASS            reduce using rule 50 (expression_atom -> number .)
    IDENTIFIER      reduce using rule 50 (expression_atom -> number .)
    NOT             reduce using rule 50 (expression_atom -> number .)
    PARENL          reduce using rule 50 (expression_atom -> number .)
    NUMBER          reduce using rule 50 (expression_atom -> number .)
    STRING          reduce using rule 50 (expression_atom -> number .)
    TRUE            reduce using rule 50 (expression_atom -> number .)
    FALSE           reduce using rule 50 (expression_atom -> number .)
    DEDENT          reduce using rule 50 (expression_atom -> number .)
    COLON           reduce using rule 50 (expression_atom -> number .)
    $end            reduce using rule 50 (expression_atom -> number .)
    PARENR          reduce using rule 50 (expression_atom -> number .)
    COMMA           reduce using rule 50 (expression_atom -> number .)


state 4

    (1) program -> statementlist .

    $end            reduce using rule 1 (program -> statementlist .)


state 5

    (5) statement -> EOL .

    EOL             reduce using rule 5 (statement -> EOL .)
    PRINT           reduce using rule 5 (statement -> EOL .)
    WHILE           reduce using rule 5 (statement -> EOL .)
    IF              reduce using rule 5 (statement -> EOL .)
    FOR             reduce using rule 5 (statement -> EOL .)
    FROM            reduce using rule 5 (statement -> EOL .)
    IMPORT          reduce using rule 5 (statement -> EOL .)
    DEF             reduce using rule 5 (statement -> EOL .)
    YIELD           reduce using rule 5 (statement -> EOL .)
    PASS            reduce using rule 5 (statement -> EOL .)
    IDENTIFIER      reduce using rule 5 (statement -> EOL .)
    NOT             reduce using rule 5 (statement -> EOL .)
    PARENL          reduce using rule 5 (statement -> EOL .)
    NUMBER          reduce using rule 5 (statement -> EOL .)
    MINUS           reduce using rule 5 (statement -> EOL .)
    STRING          reduce using rule 5 (statement -> EOL .)
    TRUE            reduce using rule 5 (statement -> EOL .)
    FALSE           reduce using rule 5 (statement -> EOL .)
    $end            reduce using rule 5 (statement -> EOL .)
    DEDENT          reduce using rule 5 (statement -> EOL .)


state 6

    (6) statement -> print_statement .

    EOL             reduce using rule 6 (statement -> print_statement .)
    PRINT           reduce using rule 6 (statement -> print_statement .)
    WHILE           reduce using rule 6 (statement -> print_statement .)
    IF              reduce using rule 6 (statement -> print_statement .)
    FOR             reduce using rule 6 (statement -> print_statement .)
    FROM            reduce using rule 6 (statement -> print_statement .)
    IMPORT          reduce using rule 6 (statement -> print_statement .)
    DEF             reduce using rule 6 (statement -> print_statement .)
    YIELD           reduce using rule 6 (statement -> print_statement .)
    PASS            reduce using rule 6 (statement -> print_statement .)
    IDENTIFIER      reduce using rule 6 (statement -> print_statement .)
    NOT             reduce using rule 6 (statement -> print_statement .)
    PARENL          reduce using rule 6 (statement -> print_statement .)
    NUMBER          reduce using rule 6 (statement -> print_statement .)
    MINUS           reduce using rule 6 (statement -> print_statement .)
    STRING          reduce using rule 6 (statement -> print_statement .)
    TRUE            reduce using rule 6 (statement -> print_statement .)
    FALSE           reduce using rule 6 (statement -> print_statement .)
    $end            reduce using rule 6 (statement -> print_statement .)
    DEDENT          reduce using rule 6 (statement -> print_statement .)


state 7

    (25) while_statement -> WHILE . fullexpression COLON EOL block
    (16) fullexpression -> . or_expression
    (17) or_expression -> . and_expression
    (18) or_expression -> . and_expression OR or_expression
    (19) and_expression -> . not_expression
    (20) and_expression -> . not_expression AND not_expression
    (21) not_expression -> . comparison
    (22) not_expression -> . NOT not_expression
    (23) comparison -> . expression
    (24) comparison -> . expression COMP_OP expression
    (43) expression -> . arith_expression
    (44) expression -> . arith_expression TIMES expression
    (45) expression -> . arith_expression DIVIDE expression
    (46) expression -> . arith_expression POWER expression
    (47) arith_expression -> . expression_atom
    (48) arith_expression -> . expression_atom PLUS arith_expression
    (49) arith_expression -> . expression_atom MINUS arith_expression
    (50) expression_atom -> . number
    (51) expression_atom -> . identifier
    (52) expression_atom -> . string
    (53) expression_atom -> . boolean
    (54) expression_atom -> . func_call
    (55) expression_atom -> . PARENL fullexpression PARENR
    (58) number -> . NUMBER
    (59) number -> . MINUS number
    (63) identifier -> . IDENTIFIER
    (60) string -> . STRING
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (56) func_call -> . IDENTIFIER PARENL PARENR
    (57) func_call -> . IDENTIFIER PARENL expr_list PARENR

    NOT             shift and go to state 42
    PARENL          shift and go to state 33
    NUMBER          shift and go to state 29
    MINUS           shift and go to state 11
    IDENTIFIER      shift and go to state 31
    STRING          shift and go to state 21
    TRUE            shift and go to state 10
    FALSE           shift and go to state 15

    func_call                      shift and go to state 24
    or_expression                  shift and go to state 35
    expression_atom                shift and go to state 40
    not_expression                 shift and go to state 38
    comparison                     shift and go to state 28
    boolean                        shift and go to state 41
    fullexpression                 shift and go to state 44
    number                         shift and go to state 3
    arith_expression               shift and go to state 8
    identifier                     shift and go to state 45
    expression                     shift and go to state 43
    and_expression                 shift and go to state 18
    string                         shift and go to state 1

state 8

    (43) expression -> arith_expression .
    (44) expression -> arith_expression . TIMES expression
    (45) expression -> arith_expression . DIVIDE expression
    (46) expression -> arith_expression . POWER expression

    COMP_OP         reduce using rule 43 (expression -> arith_expression .)
    AND             reduce using rule 43 (expression -> arith_expression .)
    OR              reduce using rule 43 (expression -> arith_expression .)
    EOL             reduce using rule 43 (expression -> arith_expression .)
    PRINT           reduce using rule 43 (expression -> arith_expression .)
    WHILE           reduce using rule 43 (expression -> arith_expression .)
    IF              reduce using rule 43 (expression -> arith_expression .)
    FOR             reduce using rule 43 (expression -> arith_expression .)
    FROM            reduce using rule 43 (expression -> arith_expression .)
    IMPORT          reduce using rule 43 (expression -> arith_expression .)
    DEF             reduce using rule 43 (expression -> arith_expression .)
    YIELD           reduce using rule 43 (expression -> arith_expression .)
    PASS            reduce using rule 43 (expression -> arith_expression .)
    IDENTIFIER      reduce using rule 43 (expression -> arith_expression .)
    NOT             reduce using rule 43 (expression -> arith_expression .)
    PARENL          reduce using rule 43 (expression -> arith_expression .)
    NUMBER          reduce using rule 43 (expression -> arith_expression .)
    MINUS           reduce using rule 43 (expression -> arith_expression .)
    STRING          reduce using rule 43 (expression -> arith_expression .)
    TRUE            reduce using rule 43 (expression -> arith_expression .)
    FALSE           reduce using rule 43 (expression -> arith_expression .)
    $end            reduce using rule 43 (expression -> arith_expression .)
    DEDENT          reduce using rule 43 (expression -> arith_expression .)
    PARENR          reduce using rule 43 (expression -> arith_expression .)
    COLON           reduce using rule 43 (expression -> arith_expression .)
    COMMA           reduce using rule 43 (expression -> arith_expression .)
    TIMES           shift and go to state 48
    DIVIDE          shift and go to state 46
    POWER           shift and go to state 47


state 9

    (34) print_statement -> PRINT . fullexpression
    (16) fullexpression -> . or_expression
    (17) or_expression -> . and_expression
    (18) or_expression -> . and_expression OR or_expression
    (19) and_expression -> . not_expression
    (20) and_expression -> . not_expression AND not_expression
    (21) not_expression -> . comparison
    (22) not_expression -> . NOT not_expression
    (23) comparison -> . expression
    (24) comparison -> . expression COMP_OP expression
    (43) expression -> . arith_expression
    (44) expression -> . arith_expression TIMES expression
    (45) expression -> . arith_expression DIVIDE expression
    (46) expression -> . arith_expression POWER expression
    (47) arith_expression -> . expression_atom
    (48) arith_expression -> . expression_atom PLUS arith_expression
    (49) arith_expression -> . expression_atom MINUS arith_expression
    (50) expression_atom -> . number
    (51) expression_atom -> . identifier
    (52) expression_atom -> . string
    (53) expression_atom -> . boolean
    (54) expression_atom -> . func_call
    (55) expression_atom -> . PARENL fullexpression PARENR
    (58) number -> . NUMBER
    (59) number -> . MINUS number
    (63) identifier -> . IDENTIFIER
    (60) string -> . STRING
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (56) func_call -> . IDENTIFIER PARENL PARENR
    (57) func_call -> . IDENTIFIER PARENL expr_list PARENR

    NOT             shift and go to state 42
    PARENL          shift and go to state 33
    NUMBER          shift and go to state 29
    MINUS           shift and go to state 11
    IDENTIFIER      shift and go to state 31
    STRING          shift and go to state 21
    TRUE            shift and go to state 10
    FALSE           shift and go to state 15

    func_call                      shift and go to state 24
    or_expression                  shift and go to state 35
    expression_atom                shift and go to state 40
    not_expression                 shift and go to state 38
    comparison                     shift and go to state 28
    boolean                        shift and go to state 41
    fullexpression                 shift and go to state 49
    number                         shift and go to state 3
    arith_expression               shift and go to state 8
    identifier                     shift and go to state 45
    expression                     shift and go to state 43
    and_expression                 shift and go to state 18
    string                         shift and go to state 1

state 10

    (61) boolean -> TRUE .

    PLUS            reduce using rule 61 (boolean -> TRUE .)
    MINUS           reduce using rule 61 (boolean -> TRUE .)
    TIMES           reduce using rule 61 (boolean -> TRUE .)
    DIVIDE          reduce using rule 61 (boolean -> TRUE .)
    POWER           reduce using rule 61 (boolean -> TRUE .)
    COMP_OP         reduce using rule 61 (boolean -> TRUE .)
    AND             reduce using rule 61 (boolean -> TRUE .)
    OR              reduce using rule 61 (boolean -> TRUE .)
    COLON           reduce using rule 61 (boolean -> TRUE .)
    EOL             reduce using rule 61 (boolean -> TRUE .)
    PRINT           reduce using rule 61 (boolean -> TRUE .)
    WHILE           reduce using rule 61 (boolean -> TRUE .)
    IF              reduce using rule 61 (boolean -> TRUE .)
    FOR             reduce using rule 61 (boolean -> TRUE .)
    FROM            reduce using rule 61 (boolean -> TRUE .)
    IMPORT          reduce using rule 61 (boolean -> TRUE .)
    DEF             reduce using rule 61 (boolean -> TRUE .)
    YIELD           reduce using rule 61 (boolean -> TRUE .)
    PASS            reduce using rule 61 (boolean -> TRUE .)
    IDENTIFIER      reduce using rule 61 (boolean -> TRUE .)
    NOT             reduce using rule 61 (boolean -> TRUE .)
    PARENL          reduce using rule 61 (boolean -> TRUE .)
    NUMBER          reduce using rule 61 (boolean -> TRUE .)
    STRING          reduce using rule 61 (boolean -> TRUE .)
    TRUE            reduce using rule 61 (boolean -> TRUE .)
    FALSE           reduce using rule 61 (boolean -> TRUE .)
    $end            reduce using rule 61 (boolean -> TRUE .)
    DEDENT          reduce using rule 61 (boolean -> TRUE .)
    PARENR          reduce using rule 61 (boolean -> TRUE .)
    COMMA           reduce using rule 61 (boolean -> TRUE .)


state 11

    (59) number -> MINUS . number
    (58) number -> . NUMBER
    (59) number -> . MINUS number

    NUMBER          shift and go to state 29
    MINUS           shift and go to state 11

    number                         shift and go to state 50

state 12

    (41) def_statement -> DEF . identifier PARENL PARENR COLON EOL block
    (42) def_statement -> DEF . identifier PARENL ident_list PARENR COLON EOL block
    (63) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 51

    identifier                     shift and go to state 52

state 13

    (7) statement -> fullexpression .

    EOL             reduce using rule 7 (statement -> fullexpression .)
    PRINT           reduce using rule 7 (statement -> fullexpression .)
    WHILE           reduce using rule 7 (statement -> fullexpression .)
    IF              reduce using rule 7 (statement -> fullexpression .)
    FOR             reduce using rule 7 (statement -> fullexpression .)
    FROM            reduce using rule 7 (statement -> fullexpression .)
    IMPORT          reduce using rule 7 (statement -> fullexpression .)
    DEF             reduce using rule 7 (statement -> fullexpression .)
    YIELD           reduce using rule 7 (statement -> fullexpression .)
    PASS            reduce using rule 7 (statement -> fullexpression .)
    IDENTIFIER      reduce using rule 7 (statement -> fullexpression .)
    NOT             reduce using rule 7 (statement -> fullexpression .)
    PARENL          reduce using rule 7 (statement -> fullexpression .)
    NUMBER          reduce using rule 7 (statement -> fullexpression .)
    MINUS           reduce using rule 7 (statement -> fullexpression .)
    STRING          reduce using rule 7 (statement -> fullexpression .)
    TRUE            reduce using rule 7 (statement -> fullexpression .)
    FALSE           reduce using rule 7 (statement -> fullexpression .)
    $end            reduce using rule 7 (statement -> fullexpression .)
    DEDENT          reduce using rule 7 (statement -> fullexpression .)


state 14

    (14) statement -> assignment_statement .

    EOL             reduce using rule 14 (statement -> assignment_statement .)
    PRINT           reduce using rule 14 (statement -> assignment_statement .)
    WHILE           reduce using rule 14 (statement -> assignment_statement .)
    IF              reduce using rule 14 (statement -> assignment_statement .)
    FOR             reduce using rule 14 (statement -> assignment_statement .)
    FROM            reduce using rule 14 (statement -> assignment_statement .)
    IMPORT          reduce using rule 14 (statement -> assignment_statement .)
    DEF             reduce using rule 14 (statement -> assignment_statement .)
    YIELD           reduce using rule 14 (statement -> assignment_statement .)
    PASS            reduce using rule 14 (statement -> assignment_statement .)
    IDENTIFIER      reduce using rule 14 (statement -> assignment_statement .)
    NOT             reduce using rule 14 (statement -> assignment_statement .)
    PARENL          reduce using rule 14 (statement -> assignment_statement .)
    NUMBER          reduce using rule 14 (statement -> assignment_statement .)
    MINUS           reduce using rule 14 (statement -> assignment_statement .)
    STRING          reduce using rule 14 (statement -> assignment_statement .)
    TRUE            reduce using rule 14 (statement -> assignment_statement .)
    FALSE           reduce using rule 14 (statement -> assignment_statement .)
    $end            reduce using rule 14 (statement -> assignment_statement .)
    DEDENT          reduce using rule 14 (statement -> assignment_statement .)


state 15

    (62) boolean -> FALSE .

    PLUS            reduce using rule 62 (boolean -> FALSE .)
    MINUS           reduce using rule 62 (boolean -> FALSE .)
    TIMES           reduce using rule 62 (boolean -> FALSE .)
    DIVIDE          reduce using rule 62 (boolean -> FALSE .)
    POWER           reduce using rule 62 (boolean -> FALSE .)
    COMP_OP         reduce using rule 62 (boolean -> FALSE .)
    AND             reduce using rule 62 (boolean -> FALSE .)
    OR              reduce using rule 62 (boolean -> FALSE .)
    COLON           reduce using rule 62 (boolean -> FALSE .)
    EOL             reduce using rule 62 (boolean -> FALSE .)
    PRINT           reduce using rule 62 (boolean -> FALSE .)
    WHILE           reduce using rule 62 (boolean -> FALSE .)
    IF              reduce using rule 62 (boolean -> FALSE .)
    FOR             reduce using rule 62 (boolean -> FALSE .)
    FROM            reduce using rule 62 (boolean -> FALSE .)
    IMPORT          reduce using rule 62 (boolean -> FALSE .)
    DEF             reduce using rule 62 (boolean -> FALSE .)
    YIELD           reduce using rule 62 (boolean -> FALSE .)
    PASS            reduce using rule 62 (boolean -> FALSE .)
    IDENTIFIER      reduce using rule 62 (boolean -> FALSE .)
    NOT             reduce using rule 62 (boolean -> FALSE .)
    PARENL          reduce using rule 62 (boolean -> FALSE .)
    NUMBER          reduce using rule 62 (boolean -> FALSE .)
    STRING          reduce using rule 62 (boolean -> FALSE .)
    TRUE            reduce using rule 62 (boolean -> FALSE .)
    FALSE           reduce using rule 62 (boolean -> FALSE .)
    $end            reduce using rule 62 (boolean -> FALSE .)
    DEDENT          reduce using rule 62 (boolean -> FALSE .)
    PARENR          reduce using rule 62 (boolean -> FALSE .)
    COMMA           reduce using rule 62 (boolean -> FALSE .)


state 16

    (8) statement -> while_statement .

    EOL             reduce using rule 8 (statement -> while_statement .)
    PRINT           reduce using rule 8 (statement -> while_statement .)
    WHILE           reduce using rule 8 (statement -> while_statement .)
    IF              reduce using rule 8 (statement -> while_statement .)
    FOR             reduce using rule 8 (statement -> while_statement .)
    FROM            reduce using rule 8 (statement -> while_statement .)
    IMPORT          reduce using rule 8 (statement -> while_statement .)
    DEF             reduce using rule 8 (statement -> while_statement .)
    YIELD           reduce using rule 8 (statement -> while_statement .)
    PASS            reduce using rule 8 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 8 (statement -> while_statement .)
    NOT             reduce using rule 8 (statement -> while_statement .)
    PARENL          reduce using rule 8 (statement -> while_statement .)
    NUMBER          reduce using rule 8 (statement -> while_statement .)
    MINUS           reduce using rule 8 (statement -> while_statement .)
    STRING          reduce using rule 8 (statement -> while_statement .)
    TRUE            reduce using rule 8 (statement -> while_statement .)
    FALSE           reduce using rule 8 (statement -> while_statement .)
    $end            reduce using rule 8 (statement -> while_statement .)
    DEDENT          reduce using rule 8 (statement -> while_statement .)


state 17

    (0) S' -> program .



state 18

    (17) or_expression -> and_expression .
    (18) or_expression -> and_expression . OR or_expression

    EOL             reduce using rule 17 (or_expression -> and_expression .)
    PRINT           reduce using rule 17 (or_expression -> and_expression .)
    WHILE           reduce using rule 17 (or_expression -> and_expression .)
    IF              reduce using rule 17 (or_expression -> and_expression .)
    FOR             reduce using rule 17 (or_expression -> and_expression .)
    FROM            reduce using rule 17 (or_expression -> and_expression .)
    IMPORT          reduce using rule 17 (or_expression -> and_expression .)
    DEF             reduce using rule 17 (or_expression -> and_expression .)
    YIELD           reduce using rule 17 (or_expression -> and_expression .)
    PASS            reduce using rule 17 (or_expression -> and_expression .)
    IDENTIFIER      reduce using rule 17 (or_expression -> and_expression .)
    NOT             reduce using rule 17 (or_expression -> and_expression .)
    PARENL          reduce using rule 17 (or_expression -> and_expression .)
    NUMBER          reduce using rule 17 (or_expression -> and_expression .)
    MINUS           reduce using rule 17 (or_expression -> and_expression .)
    STRING          reduce using rule 17 (or_expression -> and_expression .)
    TRUE            reduce using rule 17 (or_expression -> and_expression .)
    FALSE           reduce using rule 17 (or_expression -> and_expression .)
    $end            reduce using rule 17 (or_expression -> and_expression .)
    DEDENT          reduce using rule 17 (or_expression -> and_expression .)
    PARENR          reduce using rule 17 (or_expression -> and_expression .)
    COLON           reduce using rule 17 (or_expression -> and_expression .)
    OR              shift and go to state 53


state 19

    (2) statementlist -> statement .
    (3) statementlist -> statement . statementlist
    (2) statementlist -> . statement
    (3) statementlist -> . statement statementlist
    (5) statement -> . EOL
    (6) statement -> . print_statement
    (7) statement -> . fullexpression
    (8) statement -> . while_statement
    (9) statement -> . if_statement
    (10) statement -> . for_statement
    (11) statement -> . import_statement
    (12) statement -> . def_statement
    (13) statement -> . yield_statement
    (14) statement -> . assignment_statement
    (15) statement -> . pass_statement
    (34) print_statement -> . PRINT fullexpression
    (16) fullexpression -> . or_expression
    (25) while_statement -> . WHILE fullexpression COLON EOL block
    (26) if_statement -> . IF fullexpression COLON EOL block
    (27) if_statement -> . IF fullexpression COLON EOL block if_trailer
    (40) for_statement -> . FOR identifier IN fullexpression COLON EOL block
    (38) import_statement -> . FROM identifier IMPORT identifier
    (39) import_statement -> . IMPORT identifier
    (41) def_statement -> . DEF identifier PARENL PARENR COLON EOL block
    (42) def_statement -> . DEF identifier PARENL ident_list PARENR COLON EOL block
    (36) yield_statement -> . YIELD fullexpression
    (37) assignment_statement -> . identifier EQUALS fullexpression
    (35) pass_statement -> . PASS
    (17) or_expression -> . and_expression
    (18) or_expression -> . and_expression OR or_expression
    (63) identifier -> . IDENTIFIER
    (19) and_expression -> . not_expression
    (20) and_expression -> . not_expression AND not_expression
    (21) not_expression -> . comparison
    (22) not_expression -> . NOT not_expression
    (23) comparison -> . expression
    (24) comparison -> . expression COMP_OP expression
    (43) expression -> . arith_expression
    (44) expression -> . arith_expression TIMES expression
    (45) expression -> . arith_expression DIVIDE expression
    (46) expression -> . arith_expression POWER expression
    (47) arith_expression -> . expression_atom
    (48) arith_expression -> . expression_atom PLUS arith_expression
    (49) arith_expression -> . expression_atom MINUS arith_expression
    (50) expression_atom -> . number
    (51) expression_atom -> . identifier
    (52) expression_atom -> . string
    (53) expression_atom -> . boolean
    (54) expression_atom -> . func_call
    (55) expression_atom -> . PARENL fullexpression PARENR
    (58) number -> . NUMBER
    (59) number -> . MINUS number
    (60) string -> . STRING
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (56) func_call -> . IDENTIFIER PARENL PARENR
    (57) func_call -> . IDENTIFIER PARENL expr_list PARENR

    $end            reduce using rule 2 (statementlist -> statement .)
    DEDENT          reduce using rule 2 (statementlist -> statement .)
    EOL             shift and go to state 5
    PRINT           shift and go to state 9
    WHILE           shift and go to state 7
    IF              shift and go to state 34
    FOR             shift and go to state 27
    FROM            shift and go to state 37
    IMPORT          shift and go to state 20
    DEF             shift and go to state 12
    YIELD           shift and go to state 30
    PASS            shift and go to state 2
    IDENTIFIER      shift and go to state 31
    NOT             shift and go to state 42
    PARENL          shift and go to state 33
    NUMBER          shift and go to state 29
    MINUS           shift and go to state 11
    STRING          shift and go to state 21
    TRUE            shift and go to state 10
    FALSE           shift and go to state 15

    number                         shift and go to state 3
    statementlist                  shift and go to state 54
    arith_expression               shift and go to state 8
    print_statement                shift and go to state 6
    and_expression                 shift and go to state 18
    expression_atom                shift and go to state 40
    fullexpression                 shift and go to state 13
    assignment_statement           shift and go to state 14
    while_statement                shift and go to state 16
    statement                      shift and go to state 19
    if_statement                   shift and go to state 22
    yield_statement                shift and go to state 23
    for_statement                  shift and go to state 25
    import_statement               shift and go to state 26
    comparison                     shift and go to state 28
    def_statement                  shift and go to state 32
    string                         shift and go to state 1
    func_call                      shift and go to state 24
    or_expression                  shift and go to state 35
    identifier                     shift and go to state 36
    not_expression                 shift and go to state 38
    pass_statement                 shift and go to state 39
    boolean                        shift and go to state 41
    expression                     shift and go to state 43

state 20

    (39) import_statement -> IMPORT . identifier
    (63) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 51

    identifier                     shift and go to state 55

state 21

    (60) string -> STRING .

    PLUS            reduce using rule 60 (string -> STRING .)
    MINUS           reduce using rule 60 (string -> STRING .)
    TIMES           reduce using rule 60 (string -> STRING .)
    DIVIDE          reduce using rule 60 (string -> STRING .)
    POWER           reduce using rule 60 (string -> STRING .)
    COMP_OP         reduce using rule 60 (string -> STRING .)
    AND             reduce using rule 60 (string -> STRING .)
    OR              reduce using rule 60 (string -> STRING .)
    EOL             reduce using rule 60 (string -> STRING .)
    PRINT           reduce using rule 60 (string -> STRING .)
    WHILE           reduce using rule 60 (string -> STRING .)
    IF              reduce using rule 60 (string -> STRING .)
    FOR             reduce using rule 60 (string -> STRING .)
    FROM            reduce using rule 60 (string -> STRING .)
    IMPORT          reduce using rule 60 (string -> STRING .)
    DEF             reduce using rule 60 (string -> STRING .)
    YIELD           reduce using rule 60 (string -> STRING .)
    PASS            reduce using rule 60 (string -> STRING .)
    IDENTIFIER      reduce using rule 60 (string -> STRING .)
    NOT             reduce using rule 60 (string -> STRING .)
    PARENL          reduce using rule 60 (string -> STRING .)
    NUMBER          reduce using rule 60 (string -> STRING .)
    STRING          reduce using rule 60 (string -> STRING .)
    TRUE            reduce using rule 60 (string -> STRING .)
    FALSE           reduce using rule 60 (string -> STRING .)
    $end            reduce using rule 60 (string -> STRING .)
    COLON           reduce using rule 60 (string -> STRING .)
    DEDENT          reduce using rule 60 (string -> STRING .)
    PARENR          reduce using rule 60 (string -> STRING .)
    COMMA           reduce using rule 60 (string -> STRING .)


state 22

    (9) statement -> if_statement .

    EOL             reduce using rule 9 (statement -> if_statement .)
    PRINT           reduce using rule 9 (statement -> if_statement .)
    WHILE           reduce using rule 9 (statement -> if_statement .)
    IF              reduce using rule 9 (statement -> if_statement .)
    FOR             reduce using rule 9 (statement -> if_statement .)
    FROM            reduce using rule 9 (statement -> if_statement .)
    IMPORT          reduce using rule 9 (statement -> if_statement .)
    DEF             reduce using rule 9 (statement -> if_statement .)
    YIELD           reduce using rule 9 (statement -> if_statement .)
    PASS            reduce using rule 9 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 9 (statement -> if_statement .)
    NOT             reduce using rule 9 (statement -> if_statement .)
    PARENL          reduce using rule 9 (statement -> if_statement .)
    NUMBER          reduce using rule 9 (statement -> if_statement .)
    MINUS           reduce using rule 9 (statement -> if_statement .)
    STRING          reduce using rule 9 (statement -> if_statement .)
    TRUE            reduce using rule 9 (statement -> if_statement .)
    FALSE           reduce using rule 9 (statement -> if_statement .)
    $end            reduce using rule 9 (statement -> if_statement .)
    DEDENT          reduce using rule 9 (statement -> if_statement .)


state 23

    (13) statement -> yield_statement .

    EOL             reduce using rule 13 (statement -> yield_statement .)
    PRINT           reduce using rule 13 (statement -> yield_statement .)
    WHILE           reduce using rule 13 (statement -> yield_statement .)
    IF              reduce using rule 13 (statement -> yield_statement .)
    FOR             reduce using rule 13 (statement -> yield_statement .)
    FROM            reduce using rule 13 (statement -> yield_statement .)
    IMPORT          reduce using rule 13 (statement -> yield_statement .)
    DEF             reduce using rule 13 (statement -> yield_statement .)
    YIELD           reduce using rule 13 (statement -> yield_statement .)
    PASS            reduce using rule 13 (statement -> yield_statement .)
    IDENTIFIER      reduce using rule 13 (statement -> yield_statement .)
    NOT             reduce using rule 13 (statement -> yield_statement .)
    PARENL          reduce using rule 13 (statement -> yield_statement .)
    NUMBER          reduce using rule 13 (statement -> yield_statement .)
    MINUS           reduce using rule 13 (statement -> yield_statement .)
    STRING          reduce using rule 13 (statement -> yield_statement .)
    TRUE            reduce using rule 13 (statement -> yield_statement .)
    FALSE           reduce using rule 13 (statement -> yield_statement .)
    $end            reduce using rule 13 (statement -> yield_statement .)
    DEDENT          reduce using rule 13 (statement -> yield_statement .)


state 24

    (54) expression_atom -> func_call .

    PLUS            reduce using rule 54 (expression_atom -> func_call .)
    MINUS           reduce using rule 54 (expression_atom -> func_call .)
    TIMES           reduce using rule 54 (expression_atom -> func_call .)
    DIVIDE          reduce using rule 54 (expression_atom -> func_call .)
    POWER           reduce using rule 54 (expression_atom -> func_call .)
    COMP_OP         reduce using rule 54 (expression_atom -> func_call .)
    AND             reduce using rule 54 (expression_atom -> func_call .)
    OR              reduce using rule 54 (expression_atom -> func_call .)
    EOL             reduce using rule 54 (expression_atom -> func_call .)
    PRINT           reduce using rule 54 (expression_atom -> func_call .)
    WHILE           reduce using rule 54 (expression_atom -> func_call .)
    IF              reduce using rule 54 (expression_atom -> func_call .)
    FOR             reduce using rule 54 (expression_atom -> func_call .)
    FROM            reduce using rule 54 (expression_atom -> func_call .)
    IMPORT          reduce using rule 54 (expression_atom -> func_call .)
    DEF             reduce using rule 54 (expression_atom -> func_call .)
    YIELD           reduce using rule 54 (expression_atom -> func_call .)
    PASS            reduce using rule 54 (expression_atom -> func_call .)
    IDENTIFIER      reduce using rule 54 (expression_atom -> func_call .)
    NOT             reduce using rule 54 (expression_atom -> func_call .)
    PARENL          reduce using rule 54 (expression_atom -> func_call .)
    NUMBER          reduce using rule 54 (expression_atom -> func_call .)
    STRING          reduce using rule 54 (expression_atom -> func_call .)
    TRUE            reduce using rule 54 (expression_atom -> func_call .)
    FALSE           reduce using rule 54 (expression_atom -> func_call .)
    DEDENT          reduce using rule 54 (expression_atom -> func_call .)
    COLON           reduce using rule 54 (expression_atom -> func_call .)
    $end            reduce using rule 54 (expression_atom -> func_call .)
    PARENR          reduce using rule 54 (expression_atom -> func_call .)
    COMMA           reduce using rule 54 (expression_atom -> func_call .)


state 25

    (10) statement -> for_statement .

    EOL             reduce using rule 10 (statement -> for_statement .)
    PRINT           reduce using rule 10 (statement -> for_statement .)
    WHILE           reduce using rule 10 (statement -> for_statement .)
    IF              reduce using rule 10 (statement -> for_statement .)
    FOR             reduce using rule 10 (statement -> for_statement .)
    FROM            reduce using rule 10 (statement -> for_statement .)
    IMPORT          reduce using rule 10 (statement -> for_statement .)
    DEF             reduce using rule 10 (statement -> for_statement .)
    YIELD           reduce using rule 10 (statement -> for_statement .)
    PASS            reduce using rule 10 (statement -> for_statement .)
    IDENTIFIER      reduce using rule 10 (statement -> for_statement .)
    NOT             reduce using rule 10 (statement -> for_statement .)
    PARENL          reduce using rule 10 (statement -> for_statement .)
    NUMBER          reduce using rule 10 (statement -> for_statement .)
    MINUS           reduce using rule 10 (statement -> for_statement .)
    STRING          reduce using rule 10 (statement -> for_statement .)
    TRUE            reduce using rule 10 (statement -> for_statement .)
    FALSE           reduce using rule 10 (statement -> for_statement .)
    $end            reduce using rule 10 (statement -> for_statement .)
    DEDENT          reduce using rule 10 (statement -> for_statement .)


state 26

    (11) statement -> import_statement .

    EOL             reduce using rule 11 (statement -> import_statement .)
    PRINT           reduce using rule 11 (statement -> import_statement .)
    WHILE           reduce using rule 11 (statement -> import_statement .)
    IF              reduce using rule 11 (statement -> import_statement .)
    FOR             reduce using rule 11 (statement -> import_statement .)
    FROM            reduce using rule 11 (statement -> import_statement .)
    IMPORT          reduce using rule 11 (statement -> import_statement .)
    DEF             reduce using rule 11 (statement -> import_statement .)
    YIELD           reduce using rule 11 (statement -> import_statement .)
    PASS            reduce using rule 11 (statement -> import_statement .)
    IDENTIFIER      reduce using rule 11 (statement -> import_statement .)
    NOT             reduce using rule 11 (statement -> import_statement .)
    PARENL          reduce using rule 11 (statement -> import_statement .)
    NUMBER          reduce using rule 11 (statement -> import_statement .)
    MINUS           reduce using rule 11 (statement -> import_statement .)
    STRING          reduce using rule 11 (statement -> import_statement .)
    TRUE            reduce using rule 11 (statement -> import_statement .)
    FALSE           reduce using rule 11 (statement -> import_statement .)
    $end            reduce using rule 11 (statement -> import_statement .)
    DEDENT          reduce using rule 11 (statement -> import_statement .)


state 27

    (40) for_statement -> FOR . identifier IN fullexpression COLON EOL block
    (63) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 51

    identifier                     shift and go to state 56

state 28

    (21) not_expression -> comparison .

    AND             reduce using rule 21 (not_expression -> comparison .)
    OR              reduce using rule 21 (not_expression -> comparison .)
    COLON           reduce using rule 21 (not_expression -> comparison .)
    EOL             reduce using rule 21 (not_expression -> comparison .)
    PRINT           reduce using rule 21 (not_expression -> comparison .)
    WHILE           reduce using rule 21 (not_expression -> comparison .)
    IF              reduce using rule 21 (not_expression -> comparison .)
    FOR             reduce using rule 21 (not_expression -> comparison .)
    FROM            reduce using rule 21 (not_expression -> comparison .)
    IMPORT          reduce using rule 21 (not_expression -> comparison .)
    DEF             reduce using rule 21 (not_expression -> comparison .)
    YIELD           reduce using rule 21 (not_expression -> comparison .)
    PASS            reduce using rule 21 (not_expression -> comparison .)
    IDENTIFIER      reduce using rule 21 (not_expression -> comparison .)
    NOT             reduce using rule 21 (not_expression -> comparison .)
    PARENL          reduce using rule 21 (not_expression -> comparison .)
    NUMBER          reduce using rule 21 (not_expression -> comparison .)
    MINUS           reduce using rule 21 (not_expression -> comparison .)
    STRING          reduce using rule 21 (not_expression -> comparison .)
    TRUE            reduce using rule 21 (not_expression -> comparison .)
    FALSE           reduce using rule 21 (not_expression -> comparison .)
    $end            reduce using rule 21 (not_expression -> comparison .)
    DEDENT          reduce using rule 21 (not_expression -> comparison .)
    PARENR          reduce using rule 21 (not_expression -> comparison .)


state 29

    (58) number -> NUMBER .

    PLUS            reduce using rule 58 (number -> NUMBER .)
    MINUS           reduce using rule 58 (number -> NUMBER .)
    TIMES           reduce using rule 58 (number -> NUMBER .)
    DIVIDE          reduce using rule 58 (number -> NUMBER .)
    POWER           reduce using rule 58 (number -> NUMBER .)
    COMP_OP         reduce using rule 58 (number -> NUMBER .)
    AND             reduce using rule 58 (number -> NUMBER .)
    OR              reduce using rule 58 (number -> NUMBER .)
    EOL             reduce using rule 58 (number -> NUMBER .)
    PRINT           reduce using rule 58 (number -> NUMBER .)
    WHILE           reduce using rule 58 (number -> NUMBER .)
    IF              reduce using rule 58 (number -> NUMBER .)
    FOR             reduce using rule 58 (number -> NUMBER .)
    FROM            reduce using rule 58 (number -> NUMBER .)
    IMPORT          reduce using rule 58 (number -> NUMBER .)
    DEF             reduce using rule 58 (number -> NUMBER .)
    YIELD           reduce using rule 58 (number -> NUMBER .)
    PASS            reduce using rule 58 (number -> NUMBER .)
    IDENTIFIER      reduce using rule 58 (number -> NUMBER .)
    NOT             reduce using rule 58 (number -> NUMBER .)
    PARENL          reduce using rule 58 (number -> NUMBER .)
    NUMBER          reduce using rule 58 (number -> NUMBER .)
    STRING          reduce using rule 58 (number -> NUMBER .)
    TRUE            reduce using rule 58 (number -> NUMBER .)
    FALSE           reduce using rule 58 (number -> NUMBER .)
    $end            reduce using rule 58 (number -> NUMBER .)
    COLON           reduce using rule 58 (number -> NUMBER .)
    DEDENT          reduce using rule 58 (number -> NUMBER .)
    PARENR          reduce using rule 58 (number -> NUMBER .)
    COMMA           reduce using rule 58 (number -> NUMBER .)


state 30

    (36) yield_statement -> YIELD . fullexpression
    (16) fullexpression -> . or_expression
    (17) or_expression -> . and_expression
    (18) or_expression -> . and_expression OR or_expression
    (19) and_expression -> . not_expression
    (20) and_expression -> . not_expression AND not_expression
    (21) not_expression -> . comparison
    (22) not_expression -> . NOT not_expression
    (23) comparison -> . expression
    (24) comparison -> . expression COMP_OP expression
    (43) expression -> . arith_expression
    (44) expression -> . arith_expression TIMES expression
    (45) expression -> . arith_expression DIVIDE expression
    (46) expression -> . arith_expression POWER expression
    (47) arith_expression -> . expression_atom
    (48) arith_expression -> . expression_atom PLUS arith_expression
    (49) arith_expression -> . expression_atom MINUS arith_expression
    (50) expression_atom -> . number
    (51) expression_atom -> . identifier
    (52) expression_atom -> . string
    (53) expression_atom -> . boolean
    (54) expression_atom -> . func_call
    (55) expression_atom -> . PARENL fullexpression PARENR
    (58) number -> . NUMBER
    (59) number -> . MINUS number
    (63) identifier -> . IDENTIFIER
    (60) string -> . STRING
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (56) func_call -> . IDENTIFIER PARENL PARENR
    (57) func_call -> . IDENTIFIER PARENL expr_list PARENR

    NOT             shift and go to state 42
    PARENL          shift and go to state 33
    NUMBER          shift and go to state 29
    MINUS           shift and go to state 11
    IDENTIFIER      shift and go to state 31
    STRING          shift and go to state 21
    TRUE            shift and go to state 10
    FALSE           shift and go to state 15

    func_call                      shift and go to state 24
    or_expression                  shift and go to state 35
    expression_atom                shift and go to state 40
    not_expression                 shift and go to state 38
    comparison                     shift and go to state 28
    boolean                        shift and go to state 41
    fullexpression                 shift and go to state 57
    number                         shift and go to state 3
    arith_expression               shift and go to state 8
    identifier                     shift and go to state 45
    expression                     shift and go to state 43
    and_expression                 shift and go to state 18
    string                         shift and go to state 1

state 31

    (63) identifier -> IDENTIFIER .
    (56) func_call -> IDENTIFIER . PARENL PARENR
    (57) func_call -> IDENTIFIER . PARENL expr_list PARENR

  ! shift/reduce conflict for PARENL resolved as shift
    PLUS            reduce using rule 63 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 63 (identifier -> IDENTIFIER .)
    TIMES           reduce using rule 63 (identifier -> IDENTIFIER .)
    DIVIDE          reduce using rule 63 (identifier -> IDENTIFIER .)
    POWER           reduce using rule 63 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 63 (identifier -> IDENTIFIER .)
    PARENR          reduce using rule 63 (identifier -> IDENTIFIER .)
    AND             reduce using rule 63 (identifier -> IDENTIFIER .)
    OR              reduce using rule 63 (identifier -> IDENTIFIER .)
    EOL             reduce using rule 63 (identifier -> IDENTIFIER .)
    PRINT           reduce using rule 63 (identifier -> IDENTIFIER .)
    WHILE           reduce using rule 63 (identifier -> IDENTIFIER .)
    IF              reduce using rule 63 (identifier -> IDENTIFIER .)
    FOR             reduce using rule 63 (identifier -> IDENTIFIER .)
    FROM            reduce using rule 63 (identifier -> IDENTIFIER .)
    IMPORT          reduce using rule 63 (identifier -> IDENTIFIER .)
    DEF             reduce using rule 63 (identifier -> IDENTIFIER .)
    YIELD           reduce using rule 63 (identifier -> IDENTIFIER .)
    PASS            reduce using rule 63 (identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 63 (identifier -> IDENTIFIER .)
    NOT             reduce using rule 63 (identifier -> IDENTIFIER .)
    NUMBER          reduce using rule 63 (identifier -> IDENTIFIER .)
    STRING          reduce using rule 63 (identifier -> IDENTIFIER .)
    TRUE            reduce using rule 63 (identifier -> IDENTIFIER .)
    FALSE           reduce using rule 63 (identifier -> IDENTIFIER .)
    $end            reduce using rule 63 (identifier -> IDENTIFIER .)
    COLON           reduce using rule 63 (identifier -> IDENTIFIER .)
    DEDENT          reduce using rule 63 (identifier -> IDENTIFIER .)
    COMP_OP         reduce using rule 63 (identifier -> IDENTIFIER .)
    EQUALS          reduce using rule 63 (identifier -> IDENTIFIER .)
    PARENL          shift and go to state 58

  ! PARENL          [ reduce using rule 63 (identifier -> IDENTIFIER .) ]


state 32

    (12) statement -> def_statement .

    EOL             reduce using rule 12 (statement -> def_statement .)
    PRINT           reduce using rule 12 (statement -> def_statement .)
    WHILE           reduce using rule 12 (statement -> def_statement .)
    IF              reduce using rule 12 (statement -> def_statement .)
    FOR             reduce using rule 12 (statement -> def_statement .)
    FROM            reduce using rule 12 (statement -> def_statement .)
    IMPORT          reduce using rule 12 (statement -> def_statement .)
    DEF             reduce using rule 12 (statement -> def_statement .)
    YIELD           reduce using rule 12 (statement -> def_statement .)
    PASS            reduce using rule 12 (statement -> def_statement .)
    IDENTIFIER      reduce using rule 12 (statement -> def_statement .)
    NOT             reduce using rule 12 (statement -> def_statement .)
    PARENL          reduce using rule 12 (statement -> def_statement .)
    NUMBER          reduce using rule 12 (statement -> def_statement .)
    MINUS           reduce using rule 12 (statement -> def_statement .)
    STRING          reduce using rule 12 (statement -> def_statement .)
    TRUE            reduce using rule 12 (statement -> def_statement .)
    FALSE           reduce using rule 12 (statement -> def_statement .)
    $end            reduce using rule 12 (statement -> def_statement .)
    DEDENT          reduce using rule 12 (statement -> def_statement .)


state 33

    (55) expression_atom -> PARENL . fullexpression PARENR
    (16) fullexpression -> . or_expression
    (17) or_expression -> . and_expression
    (18) or_expression -> . and_expression OR or_expression
    (19) and_expression -> . not_expression
    (20) and_expression -> . not_expression AND not_expression
    (21) not_expression -> . comparison
    (22) not_expression -> . NOT not_expression
    (23) comparison -> . expression
    (24) comparison -> . expression COMP_OP expression
    (43) expression -> . arith_expression
    (44) expression -> . arith_expression TIMES expression
    (45) expression -> . arith_expression DIVIDE expression
    (46) expression -> . arith_expression POWER expression
    (47) arith_expression -> . expression_atom
    (48) arith_expression -> . expression_atom PLUS arith_expression
    (49) arith_expression -> . expression_atom MINUS arith_expression
    (50) expression_atom -> . number
    (51) expression_atom -> . identifier
    (52) expression_atom -> . string
    (53) expression_atom -> . boolean
    (54) expression_atom -> . func_call
    (55) expression_atom -> . PARENL fullexpression PARENR
    (58) number -> . NUMBER
    (59) number -> . MINUS number
    (63) identifier -> . IDENTIFIER
    (60) string -> . STRING
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (56) func_call -> . IDENTIFIER PARENL PARENR
    (57) func_call -> . IDENTIFIER PARENL expr_list PARENR

    NOT             shift and go to state 42
    PARENL          shift and go to state 33
    NUMBER          shift and go to state 29
    MINUS           shift and go to state 11
    IDENTIFIER      shift and go to state 31
    STRING          shift and go to state 21
    TRUE            shift and go to state 10
    FALSE           shift and go to state 15

    func_call                      shift and go to state 24
    or_expression                  shift and go to state 35
    expression_atom                shift and go to state 40
    not_expression                 shift and go to state 38
    comparison                     shift and go to state 28
    boolean                        shift and go to state 41
    fullexpression                 shift and go to state 59
    number                         shift and go to state 3
    arith_expression               shift and go to state 8
    identifier                     shift and go to state 45
    expression                     shift and go to state 43
    and_expression                 shift and go to state 18
    string                         shift and go to state 1

state 34

    (26) if_statement -> IF . fullexpression COLON EOL block
    (27) if_statement -> IF . fullexpression COLON EOL block if_trailer
    (16) fullexpression -> . or_expression
    (17) or_expression -> . and_expression
    (18) or_expression -> . and_expression OR or_expression
    (19) and_expression -> . not_expression
    (20) and_expression -> . not_expression AND not_expression
    (21) not_expression -> . comparison
    (22) not_expression -> . NOT not_expression
    (23) comparison -> . expression
    (24) comparison -> . expression COMP_OP expression
    (43) expression -> . arith_expression
    (44) expression -> . arith_expression TIMES expression
    (45) expression -> . arith_expression DIVIDE expression
    (46) expression -> . arith_expression POWER expression
    (47) arith_expression -> . expression_atom
    (48) arith_expression -> . expression_atom PLUS arith_expression
    (49) arith_expression -> . expression_atom MINUS arith_expression
    (50) expression_atom -> . number
    (51) expression_atom -> . identifier
    (52) expression_atom -> . string
    (53) expression_atom -> . boolean
    (54) expression_atom -> . func_call
    (55) expression_atom -> . PARENL fullexpression PARENR
    (58) number -> . NUMBER
    (59) number -> . MINUS number
    (63) identifier -> . IDENTIFIER
    (60) string -> . STRING
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (56) func_call -> . IDENTIFIER PARENL PARENR
    (57) func_call -> . IDENTIFIER PARENL expr_list PARENR

    NOT             shift and go to state 42
    PARENL          shift and go to state 33
    NUMBER          shift and go to state 29
    MINUS           shift and go to state 11
    IDENTIFIER      shift and go to state 31
    STRING          shift and go to state 21
    TRUE            shift and go to state 10
    FALSE           shift and go to state 15

    func_call                      shift and go to state 24
    or_expression                  shift and go to state 35
    identifier                     shift and go to state 45
    expression_atom                shift and go to state 40
    not_expression                 shift and go to state 38
    fullexpression                 shift and go to state 60
    boolean                        shift and go to state 41
    number                         shift and go to state 3
    comparison                     shift and go to state 28
    arith_expression               shift and go to state 8
    expression                     shift and go to state 43
    and_expression                 shift and go to state 18
    string                         shift and go to state 1

state 35

    (16) fullexpression -> or_expression .

    COLON           reduce using rule 16 (fullexpression -> or_expression .)
    EOL             reduce using rule 16 (fullexpression -> or_expression .)
    PRINT           reduce using rule 16 (fullexpression -> or_expression .)
    WHILE           reduce using rule 16 (fullexpression -> or_expression .)
    IF              reduce using rule 16 (fullexpression -> or_expression .)
    FOR             reduce using rule 16 (fullexpression -> or_expression .)
    FROM            reduce using rule 16 (fullexpression -> or_expression .)
    IMPORT          reduce using rule 16 (fullexpression -> or_expression .)
    DEF             reduce using rule 16 (fullexpression -> or_expression .)
    YIELD           reduce using rule 16 (fullexpression -> or_expression .)
    PASS            reduce using rule 16 (fullexpression -> or_expression .)
    IDENTIFIER      reduce using rule 16 (fullexpression -> or_expression .)
    NOT             reduce using rule 16 (fullexpression -> or_expression .)
    PARENL          reduce using rule 16 (fullexpression -> or_expression .)
    NUMBER          reduce using rule 16 (fullexpression -> or_expression .)
    MINUS           reduce using rule 16 (fullexpression -> or_expression .)
    STRING          reduce using rule 16 (fullexpression -> or_expression .)
    TRUE            reduce using rule 16 (fullexpression -> or_expression .)
    FALSE           reduce using rule 16 (fullexpression -> or_expression .)
    $end            reduce using rule 16 (fullexpression -> or_expression .)
    DEDENT          reduce using rule 16 (fullexpression -> or_expression .)
    PARENR          reduce using rule 16 (fullexpression -> or_expression .)


state 36

    (37) assignment_statement -> identifier . EQUALS fullexpression
    (51) expression_atom -> identifier .

    EQUALS          shift and go to state 61
    PLUS            reduce using rule 51 (expression_atom -> identifier .)
    MINUS           reduce using rule 51 (expression_atom -> identifier .)
    TIMES           reduce using rule 51 (expression_atom -> identifier .)
    DIVIDE          reduce using rule 51 (expression_atom -> identifier .)
    POWER           reduce using rule 51 (expression_atom -> identifier .)
    COMP_OP         reduce using rule 51 (expression_atom -> identifier .)
    AND             reduce using rule 51 (expression_atom -> identifier .)
    OR              reduce using rule 51 (expression_atom -> identifier .)
    EOL             reduce using rule 51 (expression_atom -> identifier .)
    PRINT           reduce using rule 51 (expression_atom -> identifier .)
    WHILE           reduce using rule 51 (expression_atom -> identifier .)
    IF              reduce using rule 51 (expression_atom -> identifier .)
    FOR             reduce using rule 51 (expression_atom -> identifier .)
    FROM            reduce using rule 51 (expression_atom -> identifier .)
    IMPORT          reduce using rule 51 (expression_atom -> identifier .)
    DEF             reduce using rule 51 (expression_atom -> identifier .)
    YIELD           reduce using rule 51 (expression_atom -> identifier .)
    PASS            reduce using rule 51 (expression_atom -> identifier .)
    IDENTIFIER      reduce using rule 51 (expression_atom -> identifier .)
    NOT             reduce using rule 51 (expression_atom -> identifier .)
    PARENL          reduce using rule 51 (expression_atom -> identifier .)
    NUMBER          reduce using rule 51 (expression_atom -> identifier .)
    STRING          reduce using rule 51 (expression_atom -> identifier .)
    TRUE            reduce using rule 51 (expression_atom -> identifier .)
    FALSE           reduce using rule 51 (expression_atom -> identifier .)
    DEDENT          reduce using rule 51 (expression_atom -> identifier .)
    $end            reduce using rule 51 (expression_atom -> identifier .)


state 37

    (38) import_statement -> FROM . identifier IMPORT identifier
    (63) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 51

    identifier                     shift and go to state 62

state 38

    (19) and_expression -> not_expression .
    (20) and_expression -> not_expression . AND not_expression

    OR              reduce using rule 19 (and_expression -> not_expression .)
    COLON           reduce using rule 19 (and_expression -> not_expression .)
    EOL             reduce using rule 19 (and_expression -> not_expression .)
    PRINT           reduce using rule 19 (and_expression -> not_expression .)
    WHILE           reduce using rule 19 (and_expression -> not_expression .)
    IF              reduce using rule 19 (and_expression -> not_expression .)
    FOR             reduce using rule 19 (and_expression -> not_expression .)
    FROM            reduce using rule 19 (and_expression -> not_expression .)
    IMPORT          reduce using rule 19 (and_expression -> not_expression .)
    DEF             reduce using rule 19 (and_expression -> not_expression .)
    YIELD           reduce using rule 19 (and_expression -> not_expression .)
    PASS            reduce using rule 19 (and_expression -> not_expression .)
    IDENTIFIER      reduce using rule 19 (and_expression -> not_expression .)
    NOT             reduce using rule 19 (and_expression -> not_expression .)
    PARENL          reduce using rule 19 (and_expression -> not_expression .)
    NUMBER          reduce using rule 19 (and_expression -> not_expression .)
    MINUS           reduce using rule 19 (and_expression -> not_expression .)
    STRING          reduce using rule 19 (and_expression -> not_expression .)
    TRUE            reduce using rule 19 (and_expression -> not_expression .)
    FALSE           reduce using rule 19 (and_expression -> not_expression .)
    DEDENT          reduce using rule 19 (and_expression -> not_expression .)
    $end            reduce using rule 19 (and_expression -> not_expression .)
    PARENR          reduce using rule 19 (and_expression -> not_expression .)
    AND             shift and go to state 63


state 39

    (15) statement -> pass_statement .

    EOL             reduce using rule 15 (statement -> pass_statement .)
    PRINT           reduce using rule 15 (statement -> pass_statement .)
    WHILE           reduce using rule 15 (statement -> pass_statement .)
    IF              reduce using rule 15 (statement -> pass_statement .)
    FOR             reduce using rule 15 (statement -> pass_statement .)
    FROM            reduce using rule 15 (statement -> pass_statement .)
    IMPORT          reduce using rule 15 (statement -> pass_statement .)
    DEF             reduce using rule 15 (statement -> pass_statement .)
    YIELD           reduce using rule 15 (statement -> pass_statement .)
    PASS            reduce using rule 15 (statement -> pass_statement .)
    IDENTIFIER      reduce using rule 15 (statement -> pass_statement .)
    NOT             reduce using rule 15 (statement -> pass_statement .)
    PARENL          reduce using rule 15 (statement -> pass_statement .)
    NUMBER          reduce using rule 15 (statement -> pass_statement .)
    MINUS           reduce using rule 15 (statement -> pass_statement .)
    STRING          reduce using rule 15 (statement -> pass_statement .)
    TRUE            reduce using rule 15 (statement -> pass_statement .)
    FALSE           reduce using rule 15 (statement -> pass_statement .)
    $end            reduce using rule 15 (statement -> pass_statement .)
    DEDENT          reduce using rule 15 (statement -> pass_statement .)


state 40

    (47) arith_expression -> expression_atom .
    (48) arith_expression -> expression_atom . PLUS arith_expression
    (49) arith_expression -> expression_atom . MINUS arith_expression

  ! shift/reduce conflict for MINUS resolved as shift
    TIMES           reduce using rule 47 (arith_expression -> expression_atom .)
    DIVIDE          reduce using rule 47 (arith_expression -> expression_atom .)
    POWER           reduce using rule 47 (arith_expression -> expression_atom .)
    COMP_OP         reduce using rule 47 (arith_expression -> expression_atom .)
    AND             reduce using rule 47 (arith_expression -> expression_atom .)
    OR              reduce using rule 47 (arith_expression -> expression_atom .)
    EOL             reduce using rule 47 (arith_expression -> expression_atom .)
    PRINT           reduce using rule 47 (arith_expression -> expression_atom .)
    WHILE           reduce using rule 47 (arith_expression -> expression_atom .)
    IF              reduce using rule 47 (arith_expression -> expression_atom .)
    FOR             reduce using rule 47 (arith_expression -> expression_atom .)
    FROM            reduce using rule 47 (arith_expression -> expression_atom .)
    IMPORT          reduce using rule 47 (arith_expression -> expression_atom .)
    DEF             reduce using rule 47 (arith_expression -> expression_atom .)
    YIELD           reduce using rule 47 (arith_expression -> expression_atom .)
    PASS            reduce using rule 47 (arith_expression -> expression_atom .)
    IDENTIFIER      reduce using rule 47 (arith_expression -> expression_atom .)
    NOT             reduce using rule 47 (arith_expression -> expression_atom .)
    PARENL          reduce using rule 47 (arith_expression -> expression_atom .)
    NUMBER          reduce using rule 47 (arith_expression -> expression_atom .)
    STRING          reduce using rule 47 (arith_expression -> expression_atom .)
    TRUE            reduce using rule 47 (arith_expression -> expression_atom .)
    FALSE           reduce using rule 47 (arith_expression -> expression_atom .)
    $end            reduce using rule 47 (arith_expression -> expression_atom .)
    COLON           reduce using rule 47 (arith_expression -> expression_atom .)
    DEDENT          reduce using rule 47 (arith_expression -> expression_atom .)
    PARENR          reduce using rule 47 (arith_expression -> expression_atom .)
    COMMA           reduce using rule 47 (arith_expression -> expression_atom .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65

  ! MINUS           [ reduce using rule 47 (arith_expression -> expression_atom .) ]


state 41

    (53) expression_atom -> boolean .

    PLUS            reduce using rule 53 (expression_atom -> boolean .)
    MINUS           reduce using rule 53 (expression_atom -> boolean .)
    TIMES           reduce using rule 53 (expression_atom -> boolean .)
    DIVIDE          reduce using rule 53 (expression_atom -> boolean .)
    POWER           reduce using rule 53 (expression_atom -> boolean .)
    COMP_OP         reduce using rule 53 (expression_atom -> boolean .)
    AND             reduce using rule 53 (expression_atom -> boolean .)
    OR              reduce using rule 53 (expression_atom -> boolean .)
    EOL             reduce using rule 53 (expression_atom -> boolean .)
    PRINT           reduce using rule 53 (expression_atom -> boolean .)
    WHILE           reduce using rule 53 (expression_atom -> boolean .)
    IF              reduce using rule 53 (expression_atom -> boolean .)
    FOR             reduce using rule 53 (expression_atom -> boolean .)
    FROM            reduce using rule 53 (expression_atom -> boolean .)
    IMPORT          reduce using rule 53 (expression_atom -> boolean .)
    DEF             reduce using rule 53 (expression_atom -> boolean .)
    YIELD           reduce using rule 53 (expression_atom -> boolean .)
    PASS            reduce using rule 53 (expression_atom -> boolean .)
    IDENTIFIER      reduce using rule 53 (expression_atom -> boolean .)
    NOT             reduce using rule 53 (expression_atom -> boolean .)
    PARENL          reduce using rule 53 (expression_atom -> boolean .)
    NUMBER          reduce using rule 53 (expression_atom -> boolean .)
    STRING          reduce using rule 53 (expression_atom -> boolean .)
    TRUE            reduce using rule 53 (expression_atom -> boolean .)
    FALSE           reduce using rule 53 (expression_atom -> boolean .)
    DEDENT          reduce using rule 53 (expression_atom -> boolean .)
    COLON           reduce using rule 53 (expression_atom -> boolean .)
    $end            reduce using rule 53 (expression_atom -> boolean .)
    PARENR          reduce using rule 53 (expression_atom -> boolean .)
    COMMA           reduce using rule 53 (expression_atom -> boolean .)


state 42

    (22) not_expression -> NOT . not_expression
    (21) not_expression -> . comparison
    (22) not_expression -> . NOT not_expression
    (23) comparison -> . expression
    (24) comparison -> . expression COMP_OP expression
    (43) expression -> . arith_expression
    (44) expression -> . arith_expression TIMES expression
    (45) expression -> . arith_expression DIVIDE expression
    (46) expression -> . arith_expression POWER expression
    (47) arith_expression -> . expression_atom
    (48) arith_expression -> . expression_atom PLUS arith_expression
    (49) arith_expression -> . expression_atom MINUS arith_expression
    (50) expression_atom -> . number
    (51) expression_atom -> . identifier
    (52) expression_atom -> . string
    (53) expression_atom -> . boolean
    (54) expression_atom -> . func_call
    (55) expression_atom -> . PARENL fullexpression PARENR
    (58) number -> . NUMBER
    (59) number -> . MINUS number
    (63) identifier -> . IDENTIFIER
    (60) string -> . STRING
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (56) func_call -> . IDENTIFIER PARENL PARENR
    (57) func_call -> . IDENTIFIER PARENL expr_list PARENR

    NOT             shift and go to state 42
    PARENL          shift and go to state 33
    NUMBER          shift and go to state 29
    MINUS           shift and go to state 11
    IDENTIFIER      shift and go to state 31
    STRING          shift and go to state 21
    TRUE            shift and go to state 10
    FALSE           shift and go to state 15

    func_call                      shift and go to state 24
    comparison                     shift and go to state 28
    expression_atom                shift and go to state 40
    not_expression                 shift and go to state 66
    boolean                        shift and go to state 41
    number                         shift and go to state 3
    arith_expression               shift and go to state 8
    identifier                     shift and go to state 45
    expression                     shift and go to state 43
    string                         shift and go to state 1

state 43

    (23) comparison -> expression .
    (24) comparison -> expression . COMP_OP expression

    AND             reduce using rule 23 (comparison -> expression .)
    OR              reduce using rule 23 (comparison -> expression .)
    EOL             reduce using rule 23 (comparison -> expression .)
    PRINT           reduce using rule 23 (comparison -> expression .)
    WHILE           reduce using rule 23 (comparison -> expression .)
    IF              reduce using rule 23 (comparison -> expression .)
    FOR             reduce using rule 23 (comparison -> expression .)
    FROM            reduce using rule 23 (comparison -> expression .)
    IMPORT          reduce using rule 23 (comparison -> expression .)
    DEF             reduce using rule 23 (comparison -> expression .)
    YIELD           reduce using rule 23 (comparison -> expression .)
    PASS            reduce using rule 23 (comparison -> expression .)
    IDENTIFIER      reduce using rule 23 (comparison -> expression .)
    NOT             reduce using rule 23 (comparison -> expression .)
    PARENL          reduce using rule 23 (comparison -> expression .)
    NUMBER          reduce using rule 23 (comparison -> expression .)
    MINUS           reduce using rule 23 (comparison -> expression .)
    STRING          reduce using rule 23 (comparison -> expression .)
    TRUE            reduce using rule 23 (comparison -> expression .)
    FALSE           reduce using rule 23 (comparison -> expression .)
    $end            reduce using rule 23 (comparison -> expression .)
    DEDENT          reduce using rule 23 (comparison -> expression .)
    COLON           reduce using rule 23 (comparison -> expression .)
    PARENR          reduce using rule 23 (comparison -> expression .)
    COMP_OP         shift and go to state 67


state 44

    (25) while_statement -> WHILE fullexpression . COLON EOL block

    COLON           shift and go to state 68


state 45

    (51) expression_atom -> identifier .

    PLUS            reduce using rule 51 (expression_atom -> identifier .)
    MINUS           reduce using rule 51 (expression_atom -> identifier .)
    TIMES           reduce using rule 51 (expression_atom -> identifier .)
    DIVIDE          reduce using rule 51 (expression_atom -> identifier .)
    POWER           reduce using rule 51 (expression_atom -> identifier .)
    COMP_OP         reduce using rule 51 (expression_atom -> identifier .)
    AND             reduce using rule 51 (expression_atom -> identifier .)
    OR              reduce using rule 51 (expression_atom -> identifier .)
    COLON           reduce using rule 51 (expression_atom -> identifier .)
    EOL             reduce using rule 51 (expression_atom -> identifier .)
    PRINT           reduce using rule 51 (expression_atom -> identifier .)
    WHILE           reduce using rule 51 (expression_atom -> identifier .)
    IF              reduce using rule 51 (expression_atom -> identifier .)
    FOR             reduce using rule 51 (expression_atom -> identifier .)
    FROM            reduce using rule 51 (expression_atom -> identifier .)
    IMPORT          reduce using rule 51 (expression_atom -> identifier .)
    DEF             reduce using rule 51 (expression_atom -> identifier .)
    YIELD           reduce using rule 51 (expression_atom -> identifier .)
    PASS            reduce using rule 51 (expression_atom -> identifier .)
    IDENTIFIER      reduce using rule 51 (expression_atom -> identifier .)
    NOT             reduce using rule 51 (expression_atom -> identifier .)
    PARENL          reduce using rule 51 (expression_atom -> identifier .)
    NUMBER          reduce using rule 51 (expression_atom -> identifier .)
    STRING          reduce using rule 51 (expression_atom -> identifier .)
    TRUE            reduce using rule 51 (expression_atom -> identifier .)
    FALSE           reduce using rule 51 (expression_atom -> identifier .)
    $end            reduce using rule 51 (expression_atom -> identifier .)
    DEDENT          reduce using rule 51 (expression_atom -> identifier .)
    PARENR          reduce using rule 51 (expression_atom -> identifier .)
    COMMA           reduce using rule 51 (expression_atom -> identifier .)


state 46

    (45) expression -> arith_expression DIVIDE . expression
    (43) expression -> . arith_expression
    (44) expression -> . arith_expression TIMES expression
    (45) expression -> . arith_expression DIVIDE expression
    (46) expression -> . arith_expression POWER expression
    (47) arith_expression -> . expression_atom
    (48) arith_expression -> . expression_atom PLUS arith_expression
    (49) arith_expression -> . expression_atom MINUS arith_expression
    (50) expression_atom -> . number
    (51) expression_atom -> . identifier
    (52) expression_atom -> . string
    (53) expression_atom -> . boolean
    (54) expression_atom -> . func_call
    (55) expression_atom -> . PARENL fullexpression PARENR
    (58) number -> . NUMBER
    (59) number -> . MINUS number
    (63) identifier -> . IDENTIFIER
    (60) string -> . STRING
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (56) func_call -> . IDENTIFIER PARENL PARENR
    (57) func_call -> . IDENTIFIER PARENL expr_list PARENR

    PARENL          shift and go to state 33
    NUMBER          shift and go to state 29
    MINUS           shift and go to state 11
    IDENTIFIER      shift and go to state 31
    STRING          shift and go to state 21
    TRUE            shift and go to state 10
    FALSE           shift and go to state 15

    func_call                      shift and go to state 24
    string                         shift and go to state 1
    boolean                        shift and go to state 41
    number                         shift and go to state 3
    arith_expression               shift and go to state 8
    identifier                     shift and go to state 45
    expression                     shift and go to state 69
    expression_atom                shift and go to state 40

state 47

    (46) expression -> arith_expression POWER . expression
    (43) expression -> . arith_expression
    (44) expression -> . arith_expression TIMES expression
    (45) expression -> . arith_expression DIVIDE expression
    (46) expression -> . arith_expression POWER expression
    (47) arith_expression -> . expression_atom
    (48) arith_expression -> . expression_atom PLUS arith_expression
    (49) arith_expression -> . expression_atom MINUS arith_expression
    (50) expression_atom -> . number
    (51) expression_atom -> . identifier
    (52) expression_atom -> . string
    (53) expression_atom -> . boolean
    (54) expression_atom -> . func_call
    (55) expression_atom -> . PARENL fullexpression PARENR
    (58) number -> . NUMBER
    (59) number -> . MINUS number
    (63) identifier -> . IDENTIFIER
    (60) string -> . STRING
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (56) func_call -> . IDENTIFIER PARENL PARENR
    (57) func_call -> . IDENTIFIER PARENL expr_list PARENR

    PARENL          shift and go to state 33
    NUMBER          shift and go to state 29
    MINUS           shift and go to state 11
    IDENTIFIER      shift and go to state 31
    STRING          shift and go to state 21
    TRUE            shift and go to state 10
    FALSE           shift and go to state 15

    func_call                      shift and go to state 24
    string                         shift and go to state 1
    boolean                        shift and go to state 41
    number                         shift and go to state 3
    arith_expression               shift and go to state 8
    identifier                     shift and go to state 45
    expression                     shift and go to state 70
    expression_atom                shift and go to state 40

state 48

    (44) expression -> arith_expression TIMES . expression
    (43) expression -> . arith_expression
    (44) expression -> . arith_expression TIMES expression
    (45) expression -> . arith_expression DIVIDE expression
    (46) expression -> . arith_expression POWER expression
    (47) arith_expression -> . expression_atom
    (48) arith_expression -> . expression_atom PLUS arith_expression
    (49) arith_expression -> . expression_atom MINUS arith_expression
    (50) expression_atom -> . number
    (51) expression_atom -> . identifier
    (52) expression_atom -> . string
    (53) expression_atom -> . boolean
    (54) expression_atom -> . func_call
    (55) expression_atom -> . PARENL fullexpression PARENR
    (58) number -> . NUMBER
    (59) number -> . MINUS number
    (63) identifier -> . IDENTIFIER
    (60) string -> . STRING
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (56) func_call -> . IDENTIFIER PARENL PARENR
    (57) func_call -> . IDENTIFIER PARENL expr_list PARENR

    PARENL          shift and go to state 33
    NUMBER          shift and go to state 29
    MINUS           shift and go to state 11
    IDENTIFIER      shift and go to state 31
    STRING          shift and go to state 21
    TRUE            shift and go to state 10
    FALSE           shift and go to state 15

    func_call                      shift and go to state 24
    string                         shift and go to state 1
    boolean                        shift and go to state 41
    number                         shift and go to state 3
    arith_expression               shift and go to state 8
    identifier                     shift and go to state 45
    expression                     shift and go to state 71
    expression_atom                shift and go to state 40

state 49

    (34) print_statement -> PRINT fullexpression .

    EOL             reduce using rule 34 (print_statement -> PRINT fullexpression .)
    PRINT           reduce using rule 34 (print_statement -> PRINT fullexpression .)
    WHILE           reduce using rule 34 (print_statement -> PRINT fullexpression .)
    IF              reduce using rule 34 (print_statement -> PRINT fullexpression .)
    FOR             reduce using rule 34 (print_statement -> PRINT fullexpression .)
    FROM            reduce using rule 34 (print_statement -> PRINT fullexpression .)
    IMPORT          reduce using rule 34 (print_statement -> PRINT fullexpression .)
    DEF             reduce using rule 34 (print_statement -> PRINT fullexpression .)
    YIELD           reduce using rule 34 (print_statement -> PRINT fullexpression .)
    PASS            reduce using rule 34 (print_statement -> PRINT fullexpression .)
    IDENTIFIER      reduce using rule 34 (print_statement -> PRINT fullexpression .)
    NOT             reduce using rule 34 (print_statement -> PRINT fullexpression .)
    PARENL          reduce using rule 34 (print_statement -> PRINT fullexpression .)
    NUMBER          reduce using rule 34 (print_statement -> PRINT fullexpression .)
    MINUS           reduce using rule 34 (print_statement -> PRINT fullexpression .)
    STRING          reduce using rule 34 (print_statement -> PRINT fullexpression .)
    TRUE            reduce using rule 34 (print_statement -> PRINT fullexpression .)
    FALSE           reduce using rule 34 (print_statement -> PRINT fullexpression .)
    DEDENT          reduce using rule 34 (print_statement -> PRINT fullexpression .)
    $end            reduce using rule 34 (print_statement -> PRINT fullexpression .)


state 50

    (59) number -> MINUS number .

    PLUS            reduce using rule 59 (number -> MINUS number .)
    MINUS           reduce using rule 59 (number -> MINUS number .)
    TIMES           reduce using rule 59 (number -> MINUS number .)
    DIVIDE          reduce using rule 59 (number -> MINUS number .)
    POWER           reduce using rule 59 (number -> MINUS number .)
    COMP_OP         reduce using rule 59 (number -> MINUS number .)
    AND             reduce using rule 59 (number -> MINUS number .)
    OR              reduce using rule 59 (number -> MINUS number .)
    EOL             reduce using rule 59 (number -> MINUS number .)
    PRINT           reduce using rule 59 (number -> MINUS number .)
    WHILE           reduce using rule 59 (number -> MINUS number .)
    IF              reduce using rule 59 (number -> MINUS number .)
    FOR             reduce using rule 59 (number -> MINUS number .)
    FROM            reduce using rule 59 (number -> MINUS number .)
    IMPORT          reduce using rule 59 (number -> MINUS number .)
    DEF             reduce using rule 59 (number -> MINUS number .)
    YIELD           reduce using rule 59 (number -> MINUS number .)
    PASS            reduce using rule 59 (number -> MINUS number .)
    IDENTIFIER      reduce using rule 59 (number -> MINUS number .)
    NOT             reduce using rule 59 (number -> MINUS number .)
    PARENL          reduce using rule 59 (number -> MINUS number .)
    NUMBER          reduce using rule 59 (number -> MINUS number .)
    STRING          reduce using rule 59 (number -> MINUS number .)
    TRUE            reduce using rule 59 (number -> MINUS number .)
    FALSE           reduce using rule 59 (number -> MINUS number .)
    $end            reduce using rule 59 (number -> MINUS number .)
    COLON           reduce using rule 59 (number -> MINUS number .)
    DEDENT          reduce using rule 59 (number -> MINUS number .)
    PARENR          reduce using rule 59 (number -> MINUS number .)
    COMMA           reduce using rule 59 (number -> MINUS number .)


state 51

    (63) identifier -> IDENTIFIER .

    PARENL          reduce using rule 63 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 63 (identifier -> IDENTIFIER .)
    PARENR          reduce using rule 63 (identifier -> IDENTIFIER .)
    EOL             reduce using rule 63 (identifier -> IDENTIFIER .)
    PRINT           reduce using rule 63 (identifier -> IDENTIFIER .)
    WHILE           reduce using rule 63 (identifier -> IDENTIFIER .)
    IF              reduce using rule 63 (identifier -> IDENTIFIER .)
    FOR             reduce using rule 63 (identifier -> IDENTIFIER .)
    FROM            reduce using rule 63 (identifier -> IDENTIFIER .)
    IMPORT          reduce using rule 63 (identifier -> IDENTIFIER .)
    DEF             reduce using rule 63 (identifier -> IDENTIFIER .)
    YIELD           reduce using rule 63 (identifier -> IDENTIFIER .)
    PASS            reduce using rule 63 (identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 63 (identifier -> IDENTIFIER .)
    NOT             reduce using rule 63 (identifier -> IDENTIFIER .)
    NUMBER          reduce using rule 63 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 63 (identifier -> IDENTIFIER .)
    STRING          reduce using rule 63 (identifier -> IDENTIFIER .)
    TRUE            reduce using rule 63 (identifier -> IDENTIFIER .)
    FALSE           reduce using rule 63 (identifier -> IDENTIFIER .)
    $end            reduce using rule 63 (identifier -> IDENTIFIER .)
    DEDENT          reduce using rule 63 (identifier -> IDENTIFIER .)
    IN              reduce using rule 63 (identifier -> IDENTIFIER .)


state 52

    (41) def_statement -> DEF identifier . PARENL PARENR COLON EOL block
    (42) def_statement -> DEF identifier . PARENL ident_list PARENR COLON EOL block

    PARENL          shift and go to state 72


state 53

    (18) or_expression -> and_expression OR . or_expression
    (17) or_expression -> . and_expression
    (18) or_expression -> . and_expression OR or_expression
    (19) and_expression -> . not_expression
    (20) and_expression -> . not_expression AND not_expression
    (21) not_expression -> . comparison
    (22) not_expression -> . NOT not_expression
    (23) comparison -> . expression
    (24) comparison -> . expression COMP_OP expression
    (43) expression -> . arith_expression
    (44) expression -> . arith_expression TIMES expression
    (45) expression -> . arith_expression DIVIDE expression
    (46) expression -> . arith_expression POWER expression
    (47) arith_expression -> . expression_atom
    (48) arith_expression -> . expression_atom PLUS arith_expression
    (49) arith_expression -> . expression_atom MINUS arith_expression
    (50) expression_atom -> . number
    (51) expression_atom -> . identifier
    (52) expression_atom -> . string
    (53) expression_atom -> . boolean
    (54) expression_atom -> . func_call
    (55) expression_atom -> . PARENL fullexpression PARENR
    (58) number -> . NUMBER
    (59) number -> . MINUS number
    (63) identifier -> . IDENTIFIER
    (60) string -> . STRING
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (56) func_call -> . IDENTIFIER PARENL PARENR
    (57) func_call -> . IDENTIFIER PARENL expr_list PARENR

    NOT             shift and go to state 42
    PARENL          shift and go to state 33
    NUMBER          shift and go to state 29
    MINUS           shift and go to state 11
    IDENTIFIER      shift and go to state 31
    STRING          shift and go to state 21
    TRUE            shift and go to state 10
    FALSE           shift and go to state 15

    func_call                      shift and go to state 24
    or_expression                  shift and go to state 73
    expression_atom                shift and go to state 40
    not_expression                 shift and go to state 38
    comparison                     shift and go to state 28
    boolean                        shift and go to state 41
    number                         shift and go to state 3
    arith_expression               shift and go to state 8
    identifier                     shift and go to state 45
    expression                     shift and go to state 43
    and_expression                 shift and go to state 18
    string                         shift and go to state 1

state 54

    (3) statementlist -> statement statementlist .

    $end            reduce using rule 3 (statementlist -> statement statementlist .)
    DEDENT          reduce using rule 3 (statementlist -> statement statementlist .)


state 55

    (39) import_statement -> IMPORT identifier .

    EOL             reduce using rule 39 (import_statement -> IMPORT identifier .)
    PRINT           reduce using rule 39 (import_statement -> IMPORT identifier .)
    WHILE           reduce using rule 39 (import_statement -> IMPORT identifier .)
    IF              reduce using rule 39 (import_statement -> IMPORT identifier .)
    FOR             reduce using rule 39 (import_statement -> IMPORT identifier .)
    FROM            reduce using rule 39 (import_statement -> IMPORT identifier .)
    IMPORT          reduce using rule 39 (import_statement -> IMPORT identifier .)
    DEF             reduce using rule 39 (import_statement -> IMPORT identifier .)
    YIELD           reduce using rule 39 (import_statement -> IMPORT identifier .)
    PASS            reduce using rule 39 (import_statement -> IMPORT identifier .)
    IDENTIFIER      reduce using rule 39 (import_statement -> IMPORT identifier .)
    NOT             reduce using rule 39 (import_statement -> IMPORT identifier .)
    PARENL          reduce using rule 39 (import_statement -> IMPORT identifier .)
    NUMBER          reduce using rule 39 (import_statement -> IMPORT identifier .)
    MINUS           reduce using rule 39 (import_statement -> IMPORT identifier .)
    STRING          reduce using rule 39 (import_statement -> IMPORT identifier .)
    TRUE            reduce using rule 39 (import_statement -> IMPORT identifier .)
    FALSE           reduce using rule 39 (import_statement -> IMPORT identifier .)
    $end            reduce using rule 39 (import_statement -> IMPORT identifier .)
    DEDENT          reduce using rule 39 (import_statement -> IMPORT identifier .)


state 56

    (40) for_statement -> FOR identifier . IN fullexpression COLON EOL block

    IN              shift and go to state 74


state 57

    (36) yield_statement -> YIELD fullexpression .

    EOL             reduce using rule 36 (yield_statement -> YIELD fullexpression .)
    PRINT           reduce using rule 36 (yield_statement -> YIELD fullexpression .)
    WHILE           reduce using rule 36 (yield_statement -> YIELD fullexpression .)
    IF              reduce using rule 36 (yield_statement -> YIELD fullexpression .)
    FOR             reduce using rule 36 (yield_statement -> YIELD fullexpression .)
    FROM            reduce using rule 36 (yield_statement -> YIELD fullexpression .)
    IMPORT          reduce using rule 36 (yield_statement -> YIELD fullexpression .)
    DEF             reduce using rule 36 (yield_statement -> YIELD fullexpression .)
    YIELD           reduce using rule 36 (yield_statement -> YIELD fullexpression .)
    PASS            reduce using rule 36 (yield_statement -> YIELD fullexpression .)
    IDENTIFIER      reduce using rule 36 (yield_statement -> YIELD fullexpression .)
    NOT             reduce using rule 36 (yield_statement -> YIELD fullexpression .)
    PARENL          reduce using rule 36 (yield_statement -> YIELD fullexpression .)
    NUMBER          reduce using rule 36 (yield_statement -> YIELD fullexpression .)
    MINUS           reduce using rule 36 (yield_statement -> YIELD fullexpression .)
    STRING          reduce using rule 36 (yield_statement -> YIELD fullexpression .)
    TRUE            reduce using rule 36 (yield_statement -> YIELD fullexpression .)
    FALSE           reduce using rule 36 (yield_statement -> YIELD fullexpression .)
    DEDENT          reduce using rule 36 (yield_statement -> YIELD fullexpression .)
    $end            reduce using rule 36 (yield_statement -> YIELD fullexpression .)


state 58

    (56) func_call -> IDENTIFIER PARENL . PARENR
    (57) func_call -> IDENTIFIER PARENL . expr_list PARENR
    (64) expr_list -> . expression
    (65) expr_list -> . expression COMMA expr_list
    (43) expression -> . arith_expression
    (44) expression -> . arith_expression TIMES expression
    (45) expression -> . arith_expression DIVIDE expression
    (46) expression -> . arith_expression POWER expression
    (47) arith_expression -> . expression_atom
    (48) arith_expression -> . expression_atom PLUS arith_expression
    (49) arith_expression -> . expression_atom MINUS arith_expression
    (50) expression_atom -> . number
    (51) expression_atom -> . identifier
    (52) expression_atom -> . string
    (53) expression_atom -> . boolean
    (54) expression_atom -> . func_call
    (55) expression_atom -> . PARENL fullexpression PARENR
    (58) number -> . NUMBER
    (59) number -> . MINUS number
    (63) identifier -> . IDENTIFIER
    (60) string -> . STRING
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (56) func_call -> . IDENTIFIER PARENL PARENR
    (57) func_call -> . IDENTIFIER PARENL expr_list PARENR

    PARENR          shift and go to state 76
    PARENL          shift and go to state 33
    NUMBER          shift and go to state 29
    MINUS           shift and go to state 11
    IDENTIFIER      shift and go to state 31
    STRING          shift and go to state 21
    TRUE            shift and go to state 10
    FALSE           shift and go to state 15

    func_call                      shift and go to state 24
    expression_atom                shift and go to state 40
    boolean                        shift and go to state 41
    expr_list                      shift and go to state 75
    number                         shift and go to state 3
    arith_expression               shift and go to state 8
    identifier                     shift and go to state 45
    expression                     shift and go to state 77
    string                         shift and go to state 1

state 59

    (55) expression_atom -> PARENL fullexpression . PARENR

    PARENR          shift and go to state 78


state 60

    (26) if_statement -> IF fullexpression . COLON EOL block
    (27) if_statement -> IF fullexpression . COLON EOL block if_trailer

    COLON           shift and go to state 79


state 61

    (37) assignment_statement -> identifier EQUALS . fullexpression
    (16) fullexpression -> . or_expression
    (17) or_expression -> . and_expression
    (18) or_expression -> . and_expression OR or_expression
    (19) and_expression -> . not_expression
    (20) and_expression -> . not_expression AND not_expression
    (21) not_expression -> . comparison
    (22) not_expression -> . NOT not_expression
    (23) comparison -> . expression
    (24) comparison -> . expression COMP_OP expression
    (43) expression -> . arith_expression
    (44) expression -> . arith_expression TIMES expression
    (45) expression -> . arith_expression DIVIDE expression
    (46) expression -> . arith_expression POWER expression
    (47) arith_expression -> . expression_atom
    (48) arith_expression -> . expression_atom PLUS arith_expression
    (49) arith_expression -> . expression_atom MINUS arith_expression
    (50) expression_atom -> . number
    (51) expression_atom -> . identifier
    (52) expression_atom -> . string
    (53) expression_atom -> . boolean
    (54) expression_atom -> . func_call
    (55) expression_atom -> . PARENL fullexpression PARENR
    (58) number -> . NUMBER
    (59) number -> . MINUS number
    (63) identifier -> . IDENTIFIER
    (60) string -> . STRING
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (56) func_call -> . IDENTIFIER PARENL PARENR
    (57) func_call -> . IDENTIFIER PARENL expr_list PARENR

    NOT             shift and go to state 42
    PARENL          shift and go to state 33
    NUMBER          shift and go to state 29
    MINUS           shift and go to state 11
    IDENTIFIER      shift and go to state 31
    STRING          shift and go to state 21
    TRUE            shift and go to state 10
    FALSE           shift and go to state 15

    func_call                      shift and go to state 24
    comparison                     shift and go to state 28
    expression_atom                shift and go to state 40
    not_expression                 shift and go to state 38
    or_expression                  shift and go to state 35
    boolean                        shift and go to state 41
    fullexpression                 shift and go to state 80
    number                         shift and go to state 3
    arith_expression               shift and go to state 8
    identifier                     shift and go to state 45
    expression                     shift and go to state 43
    and_expression                 shift and go to state 18
    string                         shift and go to state 1

state 62

    (38) import_statement -> FROM identifier . IMPORT identifier

    IMPORT          shift and go to state 81


state 63

    (20) and_expression -> not_expression AND . not_expression
    (21) not_expression -> . comparison
    (22) not_expression -> . NOT not_expression
    (23) comparison -> . expression
    (24) comparison -> . expression COMP_OP expression
    (43) expression -> . arith_expression
    (44) expression -> . arith_expression TIMES expression
    (45) expression -> . arith_expression DIVIDE expression
    (46) expression -> . arith_expression POWER expression
    (47) arith_expression -> . expression_atom
    (48) arith_expression -> . expression_atom PLUS arith_expression
    (49) arith_expression -> . expression_atom MINUS arith_expression
    (50) expression_atom -> . number
    (51) expression_atom -> . identifier
    (52) expression_atom -> . string
    (53) expression_atom -> . boolean
    (54) expression_atom -> . func_call
    (55) expression_atom -> . PARENL fullexpression PARENR
    (58) number -> . NUMBER
    (59) number -> . MINUS number
    (63) identifier -> . IDENTIFIER
    (60) string -> . STRING
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (56) func_call -> . IDENTIFIER PARENL PARENR
    (57) func_call -> . IDENTIFIER PARENL expr_list PARENR

    NOT             shift and go to state 42
    PARENL          shift and go to state 33
    NUMBER          shift and go to state 29
    MINUS           shift and go to state 11
    IDENTIFIER      shift and go to state 31
    STRING          shift and go to state 21
    TRUE            shift and go to state 10
    FALSE           shift and go to state 15

    func_call                      shift and go to state 24
    comparison                     shift and go to state 28
    expression_atom                shift and go to state 40
    not_expression                 shift and go to state 82
    boolean                        shift and go to state 41
    number                         shift and go to state 3
    arith_expression               shift and go to state 8
    identifier                     shift and go to state 45
    expression                     shift and go to state 43
    string                         shift and go to state 1

state 64

    (48) arith_expression -> expression_atom PLUS . arith_expression
    (47) arith_expression -> . expression_atom
    (48) arith_expression -> . expression_atom PLUS arith_expression
    (49) arith_expression -> . expression_atom MINUS arith_expression
    (50) expression_atom -> . number
    (51) expression_atom -> . identifier
    (52) expression_atom -> . string
    (53) expression_atom -> . boolean
    (54) expression_atom -> . func_call
    (55) expression_atom -> . PARENL fullexpression PARENR
    (58) number -> . NUMBER
    (59) number -> . MINUS number
    (63) identifier -> . IDENTIFIER
    (60) string -> . STRING
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (56) func_call -> . IDENTIFIER PARENL PARENR
    (57) func_call -> . IDENTIFIER PARENL expr_list PARENR

    PARENL          shift and go to state 33
    NUMBER          shift and go to state 29
    MINUS           shift and go to state 11
    IDENTIFIER      shift and go to state 31
    STRING          shift and go to state 21
    TRUE            shift and go to state 10
    FALSE           shift and go to state 15

    func_call                      shift and go to state 24
    string                         shift and go to state 1
    number                         shift and go to state 3
    boolean                        shift and go to state 41
    arith_expression               shift and go to state 83
    identifier                     shift and go to state 45
    expression_atom                shift and go to state 40

state 65

    (49) arith_expression -> expression_atom MINUS . arith_expression
    (47) arith_expression -> . expression_atom
    (48) arith_expression -> . expression_atom PLUS arith_expression
    (49) arith_expression -> . expression_atom MINUS arith_expression
    (50) expression_atom -> . number
    (51) expression_atom -> . identifier
    (52) expression_atom -> . string
    (53) expression_atom -> . boolean
    (54) expression_atom -> . func_call
    (55) expression_atom -> . PARENL fullexpression PARENR
    (58) number -> . NUMBER
    (59) number -> . MINUS number
    (63) identifier -> . IDENTIFIER
    (60) string -> . STRING
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (56) func_call -> . IDENTIFIER PARENL PARENR
    (57) func_call -> . IDENTIFIER PARENL expr_list PARENR

    PARENL          shift and go to state 33
    NUMBER          shift and go to state 29
    MINUS           shift and go to state 11
    IDENTIFIER      shift and go to state 31
    STRING          shift and go to state 21
    TRUE            shift and go to state 10
    FALSE           shift and go to state 15

    func_call                      shift and go to state 24
    string                         shift and go to state 1
    number                         shift and go to state 3
    boolean                        shift and go to state 41
    arith_expression               shift and go to state 84
    identifier                     shift and go to state 45
    expression_atom                shift and go to state 40

state 66

    (22) not_expression -> NOT not_expression .

    AND             reduce using rule 22 (not_expression -> NOT not_expression .)
    OR              reduce using rule 22 (not_expression -> NOT not_expression .)
    COLON           reduce using rule 22 (not_expression -> NOT not_expression .)
    EOL             reduce using rule 22 (not_expression -> NOT not_expression .)
    PRINT           reduce using rule 22 (not_expression -> NOT not_expression .)
    WHILE           reduce using rule 22 (not_expression -> NOT not_expression .)
    IF              reduce using rule 22 (not_expression -> NOT not_expression .)
    FOR             reduce using rule 22 (not_expression -> NOT not_expression .)
    FROM            reduce using rule 22 (not_expression -> NOT not_expression .)
    IMPORT          reduce using rule 22 (not_expression -> NOT not_expression .)
    DEF             reduce using rule 22 (not_expression -> NOT not_expression .)
    YIELD           reduce using rule 22 (not_expression -> NOT not_expression .)
    PASS            reduce using rule 22 (not_expression -> NOT not_expression .)
    IDENTIFIER      reduce using rule 22 (not_expression -> NOT not_expression .)
    NOT             reduce using rule 22 (not_expression -> NOT not_expression .)
    PARENL          reduce using rule 22 (not_expression -> NOT not_expression .)
    NUMBER          reduce using rule 22 (not_expression -> NOT not_expression .)
    MINUS           reduce using rule 22 (not_expression -> NOT not_expression .)
    STRING          reduce using rule 22 (not_expression -> NOT not_expression .)
    TRUE            reduce using rule 22 (not_expression -> NOT not_expression .)
    FALSE           reduce using rule 22 (not_expression -> NOT not_expression .)
    $end            reduce using rule 22 (not_expression -> NOT not_expression .)
    DEDENT          reduce using rule 22 (not_expression -> NOT not_expression .)
    PARENR          reduce using rule 22 (not_expression -> NOT not_expression .)


state 67

    (24) comparison -> expression COMP_OP . expression
    (43) expression -> . arith_expression
    (44) expression -> . arith_expression TIMES expression
    (45) expression -> . arith_expression DIVIDE expression
    (46) expression -> . arith_expression POWER expression
    (47) arith_expression -> . expression_atom
    (48) arith_expression -> . expression_atom PLUS arith_expression
    (49) arith_expression -> . expression_atom MINUS arith_expression
    (50) expression_atom -> . number
    (51) expression_atom -> . identifier
    (52) expression_atom -> . string
    (53) expression_atom -> . boolean
    (54) expression_atom -> . func_call
    (55) expression_atom -> . PARENL fullexpression PARENR
    (58) number -> . NUMBER
    (59) number -> . MINUS number
    (63) identifier -> . IDENTIFIER
    (60) string -> . STRING
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (56) func_call -> . IDENTIFIER PARENL PARENR
    (57) func_call -> . IDENTIFIER PARENL expr_list PARENR

    PARENL          shift and go to state 33
    NUMBER          shift and go to state 29
    MINUS           shift and go to state 11
    IDENTIFIER      shift and go to state 31
    STRING          shift and go to state 21
    TRUE            shift and go to state 10
    FALSE           shift and go to state 15

    func_call                      shift and go to state 24
    string                         shift and go to state 1
    boolean                        shift and go to state 41
    number                         shift and go to state 3
    arith_expression               shift and go to state 8
    identifier                     shift and go to state 45
    expression                     shift and go to state 85
    expression_atom                shift and go to state 40

state 68

    (25) while_statement -> WHILE fullexpression COLON . EOL block

    EOL             shift and go to state 86


state 69

    (45) expression -> arith_expression DIVIDE expression .

    COMP_OP         reduce using rule 45 (expression -> arith_expression DIVIDE expression .)
    AND             reduce using rule 45 (expression -> arith_expression DIVIDE expression .)
    OR              reduce using rule 45 (expression -> arith_expression DIVIDE expression .)
    EOL             reduce using rule 45 (expression -> arith_expression DIVIDE expression .)
    PRINT           reduce using rule 45 (expression -> arith_expression DIVIDE expression .)
    WHILE           reduce using rule 45 (expression -> arith_expression DIVIDE expression .)
    IF              reduce using rule 45 (expression -> arith_expression DIVIDE expression .)
    FOR             reduce using rule 45 (expression -> arith_expression DIVIDE expression .)
    FROM            reduce using rule 45 (expression -> arith_expression DIVIDE expression .)
    IMPORT          reduce using rule 45 (expression -> arith_expression DIVIDE expression .)
    DEF             reduce using rule 45 (expression -> arith_expression DIVIDE expression .)
    YIELD           reduce using rule 45 (expression -> arith_expression DIVIDE expression .)
    PASS            reduce using rule 45 (expression -> arith_expression DIVIDE expression .)
    IDENTIFIER      reduce using rule 45 (expression -> arith_expression DIVIDE expression .)
    NOT             reduce using rule 45 (expression -> arith_expression DIVIDE expression .)
    PARENL          reduce using rule 45 (expression -> arith_expression DIVIDE expression .)
    NUMBER          reduce using rule 45 (expression -> arith_expression DIVIDE expression .)
    MINUS           reduce using rule 45 (expression -> arith_expression DIVIDE expression .)
    STRING          reduce using rule 45 (expression -> arith_expression DIVIDE expression .)
    TRUE            reduce using rule 45 (expression -> arith_expression DIVIDE expression .)
    FALSE           reduce using rule 45 (expression -> arith_expression DIVIDE expression .)
    $end            reduce using rule 45 (expression -> arith_expression DIVIDE expression .)
    DEDENT          reduce using rule 45 (expression -> arith_expression DIVIDE expression .)
    PARENR          reduce using rule 45 (expression -> arith_expression DIVIDE expression .)
    COLON           reduce using rule 45 (expression -> arith_expression DIVIDE expression .)
    COMMA           reduce using rule 45 (expression -> arith_expression DIVIDE expression .)


state 70

    (46) expression -> arith_expression POWER expression .

    COMP_OP         reduce using rule 46 (expression -> arith_expression POWER expression .)
    AND             reduce using rule 46 (expression -> arith_expression POWER expression .)
    OR              reduce using rule 46 (expression -> arith_expression POWER expression .)
    EOL             reduce using rule 46 (expression -> arith_expression POWER expression .)
    PRINT           reduce using rule 46 (expression -> arith_expression POWER expression .)
    WHILE           reduce using rule 46 (expression -> arith_expression POWER expression .)
    IF              reduce using rule 46 (expression -> arith_expression POWER expression .)
    FOR             reduce using rule 46 (expression -> arith_expression POWER expression .)
    FROM            reduce using rule 46 (expression -> arith_expression POWER expression .)
    IMPORT          reduce using rule 46 (expression -> arith_expression POWER expression .)
    DEF             reduce using rule 46 (expression -> arith_expression POWER expression .)
    YIELD           reduce using rule 46 (expression -> arith_expression POWER expression .)
    PASS            reduce using rule 46 (expression -> arith_expression POWER expression .)
    IDENTIFIER      reduce using rule 46 (expression -> arith_expression POWER expression .)
    NOT             reduce using rule 46 (expression -> arith_expression POWER expression .)
    PARENL          reduce using rule 46 (expression -> arith_expression POWER expression .)
    NUMBER          reduce using rule 46 (expression -> arith_expression POWER expression .)
    MINUS           reduce using rule 46 (expression -> arith_expression POWER expression .)
    STRING          reduce using rule 46 (expression -> arith_expression POWER expression .)
    TRUE            reduce using rule 46 (expression -> arith_expression POWER expression .)
    FALSE           reduce using rule 46 (expression -> arith_expression POWER expression .)
    $end            reduce using rule 46 (expression -> arith_expression POWER expression .)
    DEDENT          reduce using rule 46 (expression -> arith_expression POWER expression .)
    PARENR          reduce using rule 46 (expression -> arith_expression POWER expression .)
    COLON           reduce using rule 46 (expression -> arith_expression POWER expression .)
    COMMA           reduce using rule 46 (expression -> arith_expression POWER expression .)


state 71

    (44) expression -> arith_expression TIMES expression .

    COMP_OP         reduce using rule 44 (expression -> arith_expression TIMES expression .)
    AND             reduce using rule 44 (expression -> arith_expression TIMES expression .)
    OR              reduce using rule 44 (expression -> arith_expression TIMES expression .)
    EOL             reduce using rule 44 (expression -> arith_expression TIMES expression .)
    PRINT           reduce using rule 44 (expression -> arith_expression TIMES expression .)
    WHILE           reduce using rule 44 (expression -> arith_expression TIMES expression .)
    IF              reduce using rule 44 (expression -> arith_expression TIMES expression .)
    FOR             reduce using rule 44 (expression -> arith_expression TIMES expression .)
    FROM            reduce using rule 44 (expression -> arith_expression TIMES expression .)
    IMPORT          reduce using rule 44 (expression -> arith_expression TIMES expression .)
    DEF             reduce using rule 44 (expression -> arith_expression TIMES expression .)
    YIELD           reduce using rule 44 (expression -> arith_expression TIMES expression .)
    PASS            reduce using rule 44 (expression -> arith_expression TIMES expression .)
    IDENTIFIER      reduce using rule 44 (expression -> arith_expression TIMES expression .)
    NOT             reduce using rule 44 (expression -> arith_expression TIMES expression .)
    PARENL          reduce using rule 44 (expression -> arith_expression TIMES expression .)
    NUMBER          reduce using rule 44 (expression -> arith_expression TIMES expression .)
    MINUS           reduce using rule 44 (expression -> arith_expression TIMES expression .)
    STRING          reduce using rule 44 (expression -> arith_expression TIMES expression .)
    TRUE            reduce using rule 44 (expression -> arith_expression TIMES expression .)
    FALSE           reduce using rule 44 (expression -> arith_expression TIMES expression .)
    $end            reduce using rule 44 (expression -> arith_expression TIMES expression .)
    DEDENT          reduce using rule 44 (expression -> arith_expression TIMES expression .)
    PARENR          reduce using rule 44 (expression -> arith_expression TIMES expression .)
    COLON           reduce using rule 44 (expression -> arith_expression TIMES expression .)
    COMMA           reduce using rule 44 (expression -> arith_expression TIMES expression .)


state 72

    (41) def_statement -> DEF identifier PARENL . PARENR COLON EOL block
    (42) def_statement -> DEF identifier PARENL . ident_list PARENR COLON EOL block
    (66) ident_list -> . identifier
    (67) ident_list -> . identifier COMMA ident_list
    (63) identifier -> . IDENTIFIER

    PARENR          shift and go to state 87
    IDENTIFIER      shift and go to state 51

    identifier                     shift and go to state 88
    ident_list                     shift and go to state 89

state 73

    (18) or_expression -> and_expression OR or_expression .

    EOL             reduce using rule 18 (or_expression -> and_expression OR or_expression .)
    PRINT           reduce using rule 18 (or_expression -> and_expression OR or_expression .)
    WHILE           reduce using rule 18 (or_expression -> and_expression OR or_expression .)
    IF              reduce using rule 18 (or_expression -> and_expression OR or_expression .)
    FOR             reduce using rule 18 (or_expression -> and_expression OR or_expression .)
    FROM            reduce using rule 18 (or_expression -> and_expression OR or_expression .)
    IMPORT          reduce using rule 18 (or_expression -> and_expression OR or_expression .)
    DEF             reduce using rule 18 (or_expression -> and_expression OR or_expression .)
    YIELD           reduce using rule 18 (or_expression -> and_expression OR or_expression .)
    PASS            reduce using rule 18 (or_expression -> and_expression OR or_expression .)
    IDENTIFIER      reduce using rule 18 (or_expression -> and_expression OR or_expression .)
    NOT             reduce using rule 18 (or_expression -> and_expression OR or_expression .)
    PARENL          reduce using rule 18 (or_expression -> and_expression OR or_expression .)
    NUMBER          reduce using rule 18 (or_expression -> and_expression OR or_expression .)
    MINUS           reduce using rule 18 (or_expression -> and_expression OR or_expression .)
    STRING          reduce using rule 18 (or_expression -> and_expression OR or_expression .)
    TRUE            reduce using rule 18 (or_expression -> and_expression OR or_expression .)
    FALSE           reduce using rule 18 (or_expression -> and_expression OR or_expression .)
    $end            reduce using rule 18 (or_expression -> and_expression OR or_expression .)
    DEDENT          reduce using rule 18 (or_expression -> and_expression OR or_expression .)
    PARENR          reduce using rule 18 (or_expression -> and_expression OR or_expression .)
    COLON           reduce using rule 18 (or_expression -> and_expression OR or_expression .)


state 74

    (40) for_statement -> FOR identifier IN . fullexpression COLON EOL block
    (16) fullexpression -> . or_expression
    (17) or_expression -> . and_expression
    (18) or_expression -> . and_expression OR or_expression
    (19) and_expression -> . not_expression
    (20) and_expression -> . not_expression AND not_expression
    (21) not_expression -> . comparison
    (22) not_expression -> . NOT not_expression
    (23) comparison -> . expression
    (24) comparison -> . expression COMP_OP expression
    (43) expression -> . arith_expression
    (44) expression -> . arith_expression TIMES expression
    (45) expression -> . arith_expression DIVIDE expression
    (46) expression -> . arith_expression POWER expression
    (47) arith_expression -> . expression_atom
    (48) arith_expression -> . expression_atom PLUS arith_expression
    (49) arith_expression -> . expression_atom MINUS arith_expression
    (50) expression_atom -> . number
    (51) expression_atom -> . identifier
    (52) expression_atom -> . string
    (53) expression_atom -> . boolean
    (54) expression_atom -> . func_call
    (55) expression_atom -> . PARENL fullexpression PARENR
    (58) number -> . NUMBER
    (59) number -> . MINUS number
    (63) identifier -> . IDENTIFIER
    (60) string -> . STRING
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (56) func_call -> . IDENTIFIER PARENL PARENR
    (57) func_call -> . IDENTIFIER PARENL expr_list PARENR

    NOT             shift and go to state 42
    PARENL          shift and go to state 33
    NUMBER          shift and go to state 29
    MINUS           shift and go to state 11
    IDENTIFIER      shift and go to state 31
    STRING          shift and go to state 21
    TRUE            shift and go to state 10
    FALSE           shift and go to state 15

    func_call                      shift and go to state 24
    or_expression                  shift and go to state 35
    expression_atom                shift and go to state 40
    not_expression                 shift and go to state 38
    fullexpression                 shift and go to state 90
    boolean                        shift and go to state 41
    number                         shift and go to state 3
    comparison                     shift and go to state 28
    arith_expression               shift and go to state 8
    identifier                     shift and go to state 45
    expression                     shift and go to state 43
    and_expression                 shift and go to state 18
    string                         shift and go to state 1

state 75

    (57) func_call -> IDENTIFIER PARENL expr_list . PARENR

    PARENR          shift and go to state 91


state 76

    (56) func_call -> IDENTIFIER PARENL PARENR .

    PLUS            reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    MINUS           reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    TIMES           reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    DIVIDE          reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    POWER           reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    COMP_OP         reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    AND             reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    OR              reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    EOL             reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    PRINT           reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    WHILE           reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    IF              reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    FOR             reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    FROM            reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    IMPORT          reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    DEF             reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    YIELD           reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    PASS            reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    IDENTIFIER      reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    NOT             reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    PARENL          reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    NUMBER          reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    STRING          reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    TRUE            reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    FALSE           reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    $end            reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    COLON           reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    DEDENT          reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    PARENR          reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)
    COMMA           reduce using rule 56 (func_call -> IDENTIFIER PARENL PARENR .)


state 77

    (64) expr_list -> expression .
    (65) expr_list -> expression . COMMA expr_list

    PARENR          reduce using rule 64 (expr_list -> expression .)
    COMMA           shift and go to state 92


state 78

    (55) expression_atom -> PARENL fullexpression PARENR .

    PLUS            reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    MINUS           reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    TIMES           reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    DIVIDE          reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    POWER           reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    COMP_OP         reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    AND             reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    OR              reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    EOL             reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    PRINT           reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    WHILE           reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    IF              reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    FOR             reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    FROM            reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    IMPORT          reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    DEF             reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    YIELD           reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    PASS            reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    IDENTIFIER      reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    NOT             reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    PARENL          reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    NUMBER          reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    STRING          reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    TRUE            reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    FALSE           reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    DEDENT          reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    COLON           reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    $end            reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    PARENR          reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)
    COMMA           reduce using rule 55 (expression_atom -> PARENL fullexpression PARENR .)


state 79

    (26) if_statement -> IF fullexpression COLON . EOL block
    (27) if_statement -> IF fullexpression COLON . EOL block if_trailer

    EOL             shift and go to state 93


state 80

    (37) assignment_statement -> identifier EQUALS fullexpression .

    EOL             reduce using rule 37 (assignment_statement -> identifier EQUALS fullexpression .)
    PRINT           reduce using rule 37 (assignment_statement -> identifier EQUALS fullexpression .)
    WHILE           reduce using rule 37 (assignment_statement -> identifier EQUALS fullexpression .)
    IF              reduce using rule 37 (assignment_statement -> identifier EQUALS fullexpression .)
    FOR             reduce using rule 37 (assignment_statement -> identifier EQUALS fullexpression .)
    FROM            reduce using rule 37 (assignment_statement -> identifier EQUALS fullexpression .)
    IMPORT          reduce using rule 37 (assignment_statement -> identifier EQUALS fullexpression .)
    DEF             reduce using rule 37 (assignment_statement -> identifier EQUALS fullexpression .)
    YIELD           reduce using rule 37 (assignment_statement -> identifier EQUALS fullexpression .)
    PASS            reduce using rule 37 (assignment_statement -> identifier EQUALS fullexpression .)
    IDENTIFIER      reduce using rule 37 (assignment_statement -> identifier EQUALS fullexpression .)
    NOT             reduce using rule 37 (assignment_statement -> identifier EQUALS fullexpression .)
    PARENL          reduce using rule 37 (assignment_statement -> identifier EQUALS fullexpression .)
    NUMBER          reduce using rule 37 (assignment_statement -> identifier EQUALS fullexpression .)
    MINUS           reduce using rule 37 (assignment_statement -> identifier EQUALS fullexpression .)
    STRING          reduce using rule 37 (assignment_statement -> identifier EQUALS fullexpression .)
    TRUE            reduce using rule 37 (assignment_statement -> identifier EQUALS fullexpression .)
    FALSE           reduce using rule 37 (assignment_statement -> identifier EQUALS fullexpression .)
    DEDENT          reduce using rule 37 (assignment_statement -> identifier EQUALS fullexpression .)
    $end            reduce using rule 37 (assignment_statement -> identifier EQUALS fullexpression .)


state 81

    (38) import_statement -> FROM identifier IMPORT . identifier
    (63) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 51

    identifier                     shift and go to state 94

state 82

    (20) and_expression -> not_expression AND not_expression .

    OR              reduce using rule 20 (and_expression -> not_expression AND not_expression .)
    COLON           reduce using rule 20 (and_expression -> not_expression AND not_expression .)
    EOL             reduce using rule 20 (and_expression -> not_expression AND not_expression .)
    PRINT           reduce using rule 20 (and_expression -> not_expression AND not_expression .)
    WHILE           reduce using rule 20 (and_expression -> not_expression AND not_expression .)
    IF              reduce using rule 20 (and_expression -> not_expression AND not_expression .)
    FOR             reduce using rule 20 (and_expression -> not_expression AND not_expression .)
    FROM            reduce using rule 20 (and_expression -> not_expression AND not_expression .)
    IMPORT          reduce using rule 20 (and_expression -> not_expression AND not_expression .)
    DEF             reduce using rule 20 (and_expression -> not_expression AND not_expression .)
    YIELD           reduce using rule 20 (and_expression -> not_expression AND not_expression .)
    PASS            reduce using rule 20 (and_expression -> not_expression AND not_expression .)
    IDENTIFIER      reduce using rule 20 (and_expression -> not_expression AND not_expression .)
    NOT             reduce using rule 20 (and_expression -> not_expression AND not_expression .)
    PARENL          reduce using rule 20 (and_expression -> not_expression AND not_expression .)
    NUMBER          reduce using rule 20 (and_expression -> not_expression AND not_expression .)
    MINUS           reduce using rule 20 (and_expression -> not_expression AND not_expression .)
    STRING          reduce using rule 20 (and_expression -> not_expression AND not_expression .)
    TRUE            reduce using rule 20 (and_expression -> not_expression AND not_expression .)
    FALSE           reduce using rule 20 (and_expression -> not_expression AND not_expression .)
    DEDENT          reduce using rule 20 (and_expression -> not_expression AND not_expression .)
    $end            reduce using rule 20 (and_expression -> not_expression AND not_expression .)
    PARENR          reduce using rule 20 (and_expression -> not_expression AND not_expression .)


state 83

    (48) arith_expression -> expression_atom PLUS arith_expression .

    TIMES           reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    DIVIDE          reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    POWER           reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    COMP_OP         reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    AND             reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    OR              reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    EOL             reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    PRINT           reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    WHILE           reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    IF              reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    FOR             reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    FROM            reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    IMPORT          reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    DEF             reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    YIELD           reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    PASS            reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    IDENTIFIER      reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    NOT             reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    PARENL          reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    NUMBER          reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    MINUS           reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    STRING          reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    TRUE            reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    FALSE           reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    $end            reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    COLON           reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    DEDENT          reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    PARENR          reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)
    COMMA           reduce using rule 48 (arith_expression -> expression_atom PLUS arith_expression .)


state 84

    (49) arith_expression -> expression_atom MINUS arith_expression .

    TIMES           reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    DIVIDE          reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    POWER           reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    COMP_OP         reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    AND             reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    OR              reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    EOL             reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    PRINT           reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    WHILE           reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    IF              reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    FOR             reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    FROM            reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    IMPORT          reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    DEF             reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    YIELD           reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    PASS            reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    IDENTIFIER      reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    NOT             reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    PARENL          reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    NUMBER          reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    MINUS           reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    STRING          reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    TRUE            reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    FALSE           reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    $end            reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    COLON           reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    DEDENT          reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    PARENR          reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)
    COMMA           reduce using rule 49 (arith_expression -> expression_atom MINUS arith_expression .)


state 85

    (24) comparison -> expression COMP_OP expression .

    AND             reduce using rule 24 (comparison -> expression COMP_OP expression .)
    OR              reduce using rule 24 (comparison -> expression COMP_OP expression .)
    EOL             reduce using rule 24 (comparison -> expression COMP_OP expression .)
    PRINT           reduce using rule 24 (comparison -> expression COMP_OP expression .)
    WHILE           reduce using rule 24 (comparison -> expression COMP_OP expression .)
    IF              reduce using rule 24 (comparison -> expression COMP_OP expression .)
    FOR             reduce using rule 24 (comparison -> expression COMP_OP expression .)
    FROM            reduce using rule 24 (comparison -> expression COMP_OP expression .)
    IMPORT          reduce using rule 24 (comparison -> expression COMP_OP expression .)
    DEF             reduce using rule 24 (comparison -> expression COMP_OP expression .)
    YIELD           reduce using rule 24 (comparison -> expression COMP_OP expression .)
    PASS            reduce using rule 24 (comparison -> expression COMP_OP expression .)
    IDENTIFIER      reduce using rule 24 (comparison -> expression COMP_OP expression .)
    NOT             reduce using rule 24 (comparison -> expression COMP_OP expression .)
    PARENL          reduce using rule 24 (comparison -> expression COMP_OP expression .)
    NUMBER          reduce using rule 24 (comparison -> expression COMP_OP expression .)
    MINUS           reduce using rule 24 (comparison -> expression COMP_OP expression .)
    STRING          reduce using rule 24 (comparison -> expression COMP_OP expression .)
    TRUE            reduce using rule 24 (comparison -> expression COMP_OP expression .)
    FALSE           reduce using rule 24 (comparison -> expression COMP_OP expression .)
    $end            reduce using rule 24 (comparison -> expression COMP_OP expression .)
    DEDENT          reduce using rule 24 (comparison -> expression COMP_OP expression .)
    COLON           reduce using rule 24 (comparison -> expression COMP_OP expression .)
    PARENR          reduce using rule 24 (comparison -> expression COMP_OP expression .)


state 86

    (25) while_statement -> WHILE fullexpression COLON EOL . block
    (4) block -> . INDENT statementlist DEDENT

    INDENT          shift and go to state 95

    block                          shift and go to state 96

state 87

    (41) def_statement -> DEF identifier PARENL PARENR . COLON EOL block

    COLON           shift and go to state 97


state 88

    (66) ident_list -> identifier .
    (67) ident_list -> identifier . COMMA ident_list

    PARENR          reduce using rule 66 (ident_list -> identifier .)
    COMMA           shift and go to state 98


state 89

    (42) def_statement -> DEF identifier PARENL ident_list . PARENR COLON EOL block

    PARENR          shift and go to state 99


state 90

    (40) for_statement -> FOR identifier IN fullexpression . COLON EOL block

    COLON           shift and go to state 100


state 91

    (57) func_call -> IDENTIFIER PARENL expr_list PARENR .

    PLUS            reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    MINUS           reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    TIMES           reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    DIVIDE          reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    POWER           reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    COMP_OP         reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    AND             reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    OR              reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    EOL             reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    PRINT           reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    WHILE           reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    IF              reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    FOR             reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    FROM            reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    IMPORT          reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    DEF             reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    YIELD           reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    PASS            reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    IDENTIFIER      reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    NOT             reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    PARENL          reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    NUMBER          reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    STRING          reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    TRUE            reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    FALSE           reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    $end            reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    COLON           reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    DEDENT          reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    PARENR          reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)
    COMMA           reduce using rule 57 (func_call -> IDENTIFIER PARENL expr_list PARENR .)


state 92

    (65) expr_list -> expression COMMA . expr_list
    (64) expr_list -> . expression
    (65) expr_list -> . expression COMMA expr_list
    (43) expression -> . arith_expression
    (44) expression -> . arith_expression TIMES expression
    (45) expression -> . arith_expression DIVIDE expression
    (46) expression -> . arith_expression POWER expression
    (47) arith_expression -> . expression_atom
    (48) arith_expression -> . expression_atom PLUS arith_expression
    (49) arith_expression -> . expression_atom MINUS arith_expression
    (50) expression_atom -> . number
    (51) expression_atom -> . identifier
    (52) expression_atom -> . string
    (53) expression_atom -> . boolean
    (54) expression_atom -> . func_call
    (55) expression_atom -> . PARENL fullexpression PARENR
    (58) number -> . NUMBER
    (59) number -> . MINUS number
    (63) identifier -> . IDENTIFIER
    (60) string -> . STRING
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (56) func_call -> . IDENTIFIER PARENL PARENR
    (57) func_call -> . IDENTIFIER PARENL expr_list PARENR

    PARENL          shift and go to state 33
    NUMBER          shift and go to state 29
    MINUS           shift and go to state 11
    IDENTIFIER      shift and go to state 31
    STRING          shift and go to state 21
    TRUE            shift and go to state 10
    FALSE           shift and go to state 15

    func_call                      shift and go to state 24
    expression_atom                shift and go to state 40
    boolean                        shift and go to state 41
    expr_list                      shift and go to state 101
    number                         shift and go to state 3
    arith_expression               shift and go to state 8
    identifier                     shift and go to state 45
    expression                     shift and go to state 77
    string                         shift and go to state 1

state 93

    (26) if_statement -> IF fullexpression COLON EOL . block
    (27) if_statement -> IF fullexpression COLON EOL . block if_trailer
    (4) block -> . INDENT statementlist DEDENT

    INDENT          shift and go to state 95

    block                          shift and go to state 102

state 94

    (38) import_statement -> FROM identifier IMPORT identifier .

    EOL             reduce using rule 38 (import_statement -> FROM identifier IMPORT identifier .)
    PRINT           reduce using rule 38 (import_statement -> FROM identifier IMPORT identifier .)
    WHILE           reduce using rule 38 (import_statement -> FROM identifier IMPORT identifier .)
    IF              reduce using rule 38 (import_statement -> FROM identifier IMPORT identifier .)
    FOR             reduce using rule 38 (import_statement -> FROM identifier IMPORT identifier .)
    FROM            reduce using rule 38 (import_statement -> FROM identifier IMPORT identifier .)
    IMPORT          reduce using rule 38 (import_statement -> FROM identifier IMPORT identifier .)
    DEF             reduce using rule 38 (import_statement -> FROM identifier IMPORT identifier .)
    YIELD           reduce using rule 38 (import_statement -> FROM identifier IMPORT identifier .)
    PASS            reduce using rule 38 (import_statement -> FROM identifier IMPORT identifier .)
    IDENTIFIER      reduce using rule 38 (import_statement -> FROM identifier IMPORT identifier .)
    NOT             reduce using rule 38 (import_statement -> FROM identifier IMPORT identifier .)
    PARENL          reduce using rule 38 (import_statement -> FROM identifier IMPORT identifier .)
    NUMBER          reduce using rule 38 (import_statement -> FROM identifier IMPORT identifier .)
    MINUS           reduce using rule 38 (import_statement -> FROM identifier IMPORT identifier .)
    STRING          reduce using rule 38 (import_statement -> FROM identifier IMPORT identifier .)
    TRUE            reduce using rule 38 (import_statement -> FROM identifier IMPORT identifier .)
    FALSE           reduce using rule 38 (import_statement -> FROM identifier IMPORT identifier .)
    $end            reduce using rule 38 (import_statement -> FROM identifier IMPORT identifier .)
    DEDENT          reduce using rule 38 (import_statement -> FROM identifier IMPORT identifier .)


state 95

    (4) block -> INDENT . statementlist DEDENT
    (2) statementlist -> . statement
    (3) statementlist -> . statement statementlist
    (5) statement -> . EOL
    (6) statement -> . print_statement
    (7) statement -> . fullexpression
    (8) statement -> . while_statement
    (9) statement -> . if_statement
    (10) statement -> . for_statement
    (11) statement -> . import_statement
    (12) statement -> . def_statement
    (13) statement -> . yield_statement
    (14) statement -> . assignment_statement
    (15) statement -> . pass_statement
    (34) print_statement -> . PRINT fullexpression
    (16) fullexpression -> . or_expression
    (25) while_statement -> . WHILE fullexpression COLON EOL block
    (26) if_statement -> . IF fullexpression COLON EOL block
    (27) if_statement -> . IF fullexpression COLON EOL block if_trailer
    (40) for_statement -> . FOR identifier IN fullexpression COLON EOL block
    (38) import_statement -> . FROM identifier IMPORT identifier
    (39) import_statement -> . IMPORT identifier
    (41) def_statement -> . DEF identifier PARENL PARENR COLON EOL block
    (42) def_statement -> . DEF identifier PARENL ident_list PARENR COLON EOL block
    (36) yield_statement -> . YIELD fullexpression
    (37) assignment_statement -> . identifier EQUALS fullexpression
    (35) pass_statement -> . PASS
    (17) or_expression -> . and_expression
    (18) or_expression -> . and_expression OR or_expression
    (63) identifier -> . IDENTIFIER
    (19) and_expression -> . not_expression
    (20) and_expression -> . not_expression AND not_expression
    (21) not_expression -> . comparison
    (22) not_expression -> . NOT not_expression
    (23) comparison -> . expression
    (24) comparison -> . expression COMP_OP expression
    (43) expression -> . arith_expression
    (44) expression -> . arith_expression TIMES expression
    (45) expression -> . arith_expression DIVIDE expression
    (46) expression -> . arith_expression POWER expression
    (47) arith_expression -> . expression_atom
    (48) arith_expression -> . expression_atom PLUS arith_expression
    (49) arith_expression -> . expression_atom MINUS arith_expression
    (50) expression_atom -> . number
    (51) expression_atom -> . identifier
    (52) expression_atom -> . string
    (53) expression_atom -> . boolean
    (54) expression_atom -> . func_call
    (55) expression_atom -> . PARENL fullexpression PARENR
    (58) number -> . NUMBER
    (59) number -> . MINUS number
    (60) string -> . STRING
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (56) func_call -> . IDENTIFIER PARENL PARENR
    (57) func_call -> . IDENTIFIER PARENL expr_list PARENR

    EOL             shift and go to state 5
    PRINT           shift and go to state 9
    WHILE           shift and go to state 7
    IF              shift and go to state 34
    FOR             shift and go to state 27
    FROM            shift and go to state 37
    IMPORT          shift and go to state 20
    DEF             shift and go to state 12
    YIELD           shift and go to state 30
    PASS            shift and go to state 2
    IDENTIFIER      shift and go to state 31
    NOT             shift and go to state 42
    PARENL          shift and go to state 33
    NUMBER          shift and go to state 29
    MINUS           shift and go to state 11
    STRING          shift and go to state 21
    TRUE            shift and go to state 10
    FALSE           shift and go to state 15

    number                         shift and go to state 3
    statementlist                  shift and go to state 103
    arith_expression               shift and go to state 8
    print_statement                shift and go to state 6
    and_expression                 shift and go to state 18
    expression_atom                shift and go to state 40
    fullexpression                 shift and go to state 13
    assignment_statement           shift and go to state 14
    while_statement                shift and go to state 16
    statement                      shift and go to state 19
    if_statement                   shift and go to state 22
    yield_statement                shift and go to state 23
    for_statement                  shift and go to state 25
    import_statement               shift and go to state 26
    comparison                     shift and go to state 28
    def_statement                  shift and go to state 32
    string                         shift and go to state 1
    func_call                      shift and go to state 24
    or_expression                  shift and go to state 35
    identifier                     shift and go to state 36
    not_expression                 shift and go to state 38
    pass_statement                 shift and go to state 39
    boolean                        shift and go to state 41
    expression                     shift and go to state 43

state 96

    (25) while_statement -> WHILE fullexpression COLON EOL block .

    EOL             reduce using rule 25 (while_statement -> WHILE fullexpression COLON EOL block .)
    PRINT           reduce using rule 25 (while_statement -> WHILE fullexpression COLON EOL block .)
    WHILE           reduce using rule 25 (while_statement -> WHILE fullexpression COLON EOL block .)
    IF              reduce using rule 25 (while_statement -> WHILE fullexpression COLON EOL block .)
    FOR             reduce using rule 25 (while_statement -> WHILE fullexpression COLON EOL block .)
    FROM            reduce using rule 25 (while_statement -> WHILE fullexpression COLON EOL block .)
    IMPORT          reduce using rule 25 (while_statement -> WHILE fullexpression COLON EOL block .)
    DEF             reduce using rule 25 (while_statement -> WHILE fullexpression COLON EOL block .)
    YIELD           reduce using rule 25 (while_statement -> WHILE fullexpression COLON EOL block .)
    PASS            reduce using rule 25 (while_statement -> WHILE fullexpression COLON EOL block .)
    IDENTIFIER      reduce using rule 25 (while_statement -> WHILE fullexpression COLON EOL block .)
    NOT             reduce using rule 25 (while_statement -> WHILE fullexpression COLON EOL block .)
    PARENL          reduce using rule 25 (while_statement -> WHILE fullexpression COLON EOL block .)
    NUMBER          reduce using rule 25 (while_statement -> WHILE fullexpression COLON EOL block .)
    MINUS           reduce using rule 25 (while_statement -> WHILE fullexpression COLON EOL block .)
    STRING          reduce using rule 25 (while_statement -> WHILE fullexpression COLON EOL block .)
    TRUE            reduce using rule 25 (while_statement -> WHILE fullexpression COLON EOL block .)
    FALSE           reduce using rule 25 (while_statement -> WHILE fullexpression COLON EOL block .)
    $end            reduce using rule 25 (while_statement -> WHILE fullexpression COLON EOL block .)
    DEDENT          reduce using rule 25 (while_statement -> WHILE fullexpression COLON EOL block .)


state 97

    (41) def_statement -> DEF identifier PARENL PARENR COLON . EOL block

    EOL             shift and go to state 104


state 98

    (67) ident_list -> identifier COMMA . ident_list
    (66) ident_list -> . identifier
    (67) ident_list -> . identifier COMMA ident_list
    (63) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 51

    identifier                     shift and go to state 88
    ident_list                     shift and go to state 105

state 99

    (42) def_statement -> DEF identifier PARENL ident_list PARENR . COLON EOL block

    COLON           shift and go to state 106


state 100

    (40) for_statement -> FOR identifier IN fullexpression COLON . EOL block

    EOL             shift and go to state 107


state 101

    (65) expr_list -> expression COMMA expr_list .

    PARENR          reduce using rule 65 (expr_list -> expression COMMA expr_list .)


state 102

    (26) if_statement -> IF fullexpression COLON EOL block .
    (27) if_statement -> IF fullexpression COLON EOL block . if_trailer
    (28) if_trailer -> . elif_clauses
    (31) if_trailer -> . else_clause
    (29) elif_clauses -> . elif_clause
    (30) elif_clauses -> . elif_clause if_trailer
    (33) else_clause -> . ELSE COLON EOL block
    (32) elif_clause -> . ELIF fullexpression COLON EOL block

    EOL             reduce using rule 26 (if_statement -> IF fullexpression COLON EOL block .)
    PRINT           reduce using rule 26 (if_statement -> IF fullexpression COLON EOL block .)
    WHILE           reduce using rule 26 (if_statement -> IF fullexpression COLON EOL block .)
    IF              reduce using rule 26 (if_statement -> IF fullexpression COLON EOL block .)
    FOR             reduce using rule 26 (if_statement -> IF fullexpression COLON EOL block .)
    FROM            reduce using rule 26 (if_statement -> IF fullexpression COLON EOL block .)
    IMPORT          reduce using rule 26 (if_statement -> IF fullexpression COLON EOL block .)
    DEF             reduce using rule 26 (if_statement -> IF fullexpression COLON EOL block .)
    YIELD           reduce using rule 26 (if_statement -> IF fullexpression COLON EOL block .)
    PASS            reduce using rule 26 (if_statement -> IF fullexpression COLON EOL block .)
    IDENTIFIER      reduce using rule 26 (if_statement -> IF fullexpression COLON EOL block .)
    NOT             reduce using rule 26 (if_statement -> IF fullexpression COLON EOL block .)
    PARENL          reduce using rule 26 (if_statement -> IF fullexpression COLON EOL block .)
    NUMBER          reduce using rule 26 (if_statement -> IF fullexpression COLON EOL block .)
    MINUS           reduce using rule 26 (if_statement -> IF fullexpression COLON EOL block .)
    STRING          reduce using rule 26 (if_statement -> IF fullexpression COLON EOL block .)
    TRUE            reduce using rule 26 (if_statement -> IF fullexpression COLON EOL block .)
    FALSE           reduce using rule 26 (if_statement -> IF fullexpression COLON EOL block .)
    $end            reduce using rule 26 (if_statement -> IF fullexpression COLON EOL block .)
    DEDENT          reduce using rule 26 (if_statement -> IF fullexpression COLON EOL block .)
    ELSE            shift and go to state 110
    ELIF            shift and go to state 108

    elif_clauses                   shift and go to state 113
    else_clause                    shift and go to state 111
    if_trailer                     shift and go to state 112
    elif_clause                    shift and go to state 109

state 103

    (4) block -> INDENT statementlist . DEDENT

    DEDENT          shift and go to state 114


state 104

    (41) def_statement -> DEF identifier PARENL PARENR COLON EOL . block
    (4) block -> . INDENT statementlist DEDENT

    INDENT          shift and go to state 95

    block                          shift and go to state 115

state 105

    (67) ident_list -> identifier COMMA ident_list .

    PARENR          reduce using rule 67 (ident_list -> identifier COMMA ident_list .)


state 106

    (42) def_statement -> DEF identifier PARENL ident_list PARENR COLON . EOL block

    EOL             shift and go to state 116


state 107

    (40) for_statement -> FOR identifier IN fullexpression COLON EOL . block
    (4) block -> . INDENT statementlist DEDENT

    INDENT          shift and go to state 95

    block                          shift and go to state 117

state 108

    (32) elif_clause -> ELIF . fullexpression COLON EOL block
    (16) fullexpression -> . or_expression
    (17) or_expression -> . and_expression
    (18) or_expression -> . and_expression OR or_expression
    (19) and_expression -> . not_expression
    (20) and_expression -> . not_expression AND not_expression
    (21) not_expression -> . comparison
    (22) not_expression -> . NOT not_expression
    (23) comparison -> . expression
    (24) comparison -> . expression COMP_OP expression
    (43) expression -> . arith_expression
    (44) expression -> . arith_expression TIMES expression
    (45) expression -> . arith_expression DIVIDE expression
    (46) expression -> . arith_expression POWER expression
    (47) arith_expression -> . expression_atom
    (48) arith_expression -> . expression_atom PLUS arith_expression
    (49) arith_expression -> . expression_atom MINUS arith_expression
    (50) expression_atom -> . number
    (51) expression_atom -> . identifier
    (52) expression_atom -> . string
    (53) expression_atom -> . boolean
    (54) expression_atom -> . func_call
    (55) expression_atom -> . PARENL fullexpression PARENR
    (58) number -> . NUMBER
    (59) number -> . MINUS number
    (63) identifier -> . IDENTIFIER
    (60) string -> . STRING
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (56) func_call -> . IDENTIFIER PARENL PARENR
    (57) func_call -> . IDENTIFIER PARENL expr_list PARENR

    NOT             shift and go to state 42
    PARENL          shift and go to state 33
    NUMBER          shift and go to state 29
    MINUS           shift and go to state 11
    IDENTIFIER      shift and go to state 31
    STRING          shift and go to state 21
    TRUE            shift and go to state 10
    FALSE           shift and go to state 15

    func_call                      shift and go to state 24
    or_expression                  shift and go to state 35
    expression_atom                shift and go to state 40
    not_expression                 shift and go to state 38
    comparison                     shift and go to state 28
    boolean                        shift and go to state 41
    fullexpression                 shift and go to state 118
    number                         shift and go to state 3
    arith_expression               shift and go to state 8
    identifier                     shift and go to state 45
    expression                     shift and go to state 43
    and_expression                 shift and go to state 18
    string                         shift and go to state 1

state 109

    (29) elif_clauses -> elif_clause .
    (30) elif_clauses -> elif_clause . if_trailer
    (28) if_trailer -> . elif_clauses
    (31) if_trailer -> . else_clause
    (29) elif_clauses -> . elif_clause
    (30) elif_clauses -> . elif_clause if_trailer
    (33) else_clause -> . ELSE COLON EOL block
    (32) elif_clause -> . ELIF fullexpression COLON EOL block

    EOL             reduce using rule 29 (elif_clauses -> elif_clause .)
    PRINT           reduce using rule 29 (elif_clauses -> elif_clause .)
    WHILE           reduce using rule 29 (elif_clauses -> elif_clause .)
    IF              reduce using rule 29 (elif_clauses -> elif_clause .)
    FOR             reduce using rule 29 (elif_clauses -> elif_clause .)
    FROM            reduce using rule 29 (elif_clauses -> elif_clause .)
    IMPORT          reduce using rule 29 (elif_clauses -> elif_clause .)
    DEF             reduce using rule 29 (elif_clauses -> elif_clause .)
    YIELD           reduce using rule 29 (elif_clauses -> elif_clause .)
    PASS            reduce using rule 29 (elif_clauses -> elif_clause .)
    IDENTIFIER      reduce using rule 29 (elif_clauses -> elif_clause .)
    NOT             reduce using rule 29 (elif_clauses -> elif_clause .)
    PARENL          reduce using rule 29 (elif_clauses -> elif_clause .)
    NUMBER          reduce using rule 29 (elif_clauses -> elif_clause .)
    MINUS           reduce using rule 29 (elif_clauses -> elif_clause .)
    STRING          reduce using rule 29 (elif_clauses -> elif_clause .)
    TRUE            reduce using rule 29 (elif_clauses -> elif_clause .)
    FALSE           reduce using rule 29 (elif_clauses -> elif_clause .)
    $end            reduce using rule 29 (elif_clauses -> elif_clause .)
    DEDENT          reduce using rule 29 (elif_clauses -> elif_clause .)
    ELSE            shift and go to state 110
    ELIF            shift and go to state 108

    elif_clauses                   shift and go to state 113
    else_clause                    shift and go to state 111
    if_trailer                     shift and go to state 119
    elif_clause                    shift and go to state 109

state 110

    (33) else_clause -> ELSE . COLON EOL block

    COLON           shift and go to state 120


state 111

    (31) if_trailer -> else_clause .

    EOL             reduce using rule 31 (if_trailer -> else_clause .)
    PRINT           reduce using rule 31 (if_trailer -> else_clause .)
    WHILE           reduce using rule 31 (if_trailer -> else_clause .)
    IF              reduce using rule 31 (if_trailer -> else_clause .)
    FOR             reduce using rule 31 (if_trailer -> else_clause .)
    FROM            reduce using rule 31 (if_trailer -> else_clause .)
    IMPORT          reduce using rule 31 (if_trailer -> else_clause .)
    DEF             reduce using rule 31 (if_trailer -> else_clause .)
    YIELD           reduce using rule 31 (if_trailer -> else_clause .)
    PASS            reduce using rule 31 (if_trailer -> else_clause .)
    IDENTIFIER      reduce using rule 31 (if_trailer -> else_clause .)
    NOT             reduce using rule 31 (if_trailer -> else_clause .)
    PARENL          reduce using rule 31 (if_trailer -> else_clause .)
    NUMBER          reduce using rule 31 (if_trailer -> else_clause .)
    MINUS           reduce using rule 31 (if_trailer -> else_clause .)
    STRING          reduce using rule 31 (if_trailer -> else_clause .)
    TRUE            reduce using rule 31 (if_trailer -> else_clause .)
    FALSE           reduce using rule 31 (if_trailer -> else_clause .)
    $end            reduce using rule 31 (if_trailer -> else_clause .)
    DEDENT          reduce using rule 31 (if_trailer -> else_clause .)


state 112

    (27) if_statement -> IF fullexpression COLON EOL block if_trailer .

    EOL             reduce using rule 27 (if_statement -> IF fullexpression COLON EOL block if_trailer .)
    PRINT           reduce using rule 27 (if_statement -> IF fullexpression COLON EOL block if_trailer .)
    WHILE           reduce using rule 27 (if_statement -> IF fullexpression COLON EOL block if_trailer .)
    IF              reduce using rule 27 (if_statement -> IF fullexpression COLON EOL block if_trailer .)
    FOR             reduce using rule 27 (if_statement -> IF fullexpression COLON EOL block if_trailer .)
    FROM            reduce using rule 27 (if_statement -> IF fullexpression COLON EOL block if_trailer .)
    IMPORT          reduce using rule 27 (if_statement -> IF fullexpression COLON EOL block if_trailer .)
    DEF             reduce using rule 27 (if_statement -> IF fullexpression COLON EOL block if_trailer .)
    YIELD           reduce using rule 27 (if_statement -> IF fullexpression COLON EOL block if_trailer .)
    PASS            reduce using rule 27 (if_statement -> IF fullexpression COLON EOL block if_trailer .)
    IDENTIFIER      reduce using rule 27 (if_statement -> IF fullexpression COLON EOL block if_trailer .)
    NOT             reduce using rule 27 (if_statement -> IF fullexpression COLON EOL block if_trailer .)
    PARENL          reduce using rule 27 (if_statement -> IF fullexpression COLON EOL block if_trailer .)
    NUMBER          reduce using rule 27 (if_statement -> IF fullexpression COLON EOL block if_trailer .)
    MINUS           reduce using rule 27 (if_statement -> IF fullexpression COLON EOL block if_trailer .)
    STRING          reduce using rule 27 (if_statement -> IF fullexpression COLON EOL block if_trailer .)
    TRUE            reduce using rule 27 (if_statement -> IF fullexpression COLON EOL block if_trailer .)
    FALSE           reduce using rule 27 (if_statement -> IF fullexpression COLON EOL block if_trailer .)
    $end            reduce using rule 27 (if_statement -> IF fullexpression COLON EOL block if_trailer .)
    DEDENT          reduce using rule 27 (if_statement -> IF fullexpression COLON EOL block if_trailer .)


state 113

    (28) if_trailer -> elif_clauses .

    EOL             reduce using rule 28 (if_trailer -> elif_clauses .)
    PRINT           reduce using rule 28 (if_trailer -> elif_clauses .)
    WHILE           reduce using rule 28 (if_trailer -> elif_clauses .)
    IF              reduce using rule 28 (if_trailer -> elif_clauses .)
    FOR             reduce using rule 28 (if_trailer -> elif_clauses .)
    FROM            reduce using rule 28 (if_trailer -> elif_clauses .)
    IMPORT          reduce using rule 28 (if_trailer -> elif_clauses .)
    DEF             reduce using rule 28 (if_trailer -> elif_clauses .)
    YIELD           reduce using rule 28 (if_trailer -> elif_clauses .)
    PASS            reduce using rule 28 (if_trailer -> elif_clauses .)
    IDENTIFIER      reduce using rule 28 (if_trailer -> elif_clauses .)
    NOT             reduce using rule 28 (if_trailer -> elif_clauses .)
    PARENL          reduce using rule 28 (if_trailer -> elif_clauses .)
    NUMBER          reduce using rule 28 (if_trailer -> elif_clauses .)
    MINUS           reduce using rule 28 (if_trailer -> elif_clauses .)
    STRING          reduce using rule 28 (if_trailer -> elif_clauses .)
    TRUE            reduce using rule 28 (if_trailer -> elif_clauses .)
    FALSE           reduce using rule 28 (if_trailer -> elif_clauses .)
    $end            reduce using rule 28 (if_trailer -> elif_clauses .)
    DEDENT          reduce using rule 28 (if_trailer -> elif_clauses .)


state 114

    (4) block -> INDENT statementlist DEDENT .

    EOL             reduce using rule 4 (block -> INDENT statementlist DEDENT .)
    PRINT           reduce using rule 4 (block -> INDENT statementlist DEDENT .)
    WHILE           reduce using rule 4 (block -> INDENT statementlist DEDENT .)
    IF              reduce using rule 4 (block -> INDENT statementlist DEDENT .)
    FOR             reduce using rule 4 (block -> INDENT statementlist DEDENT .)
    FROM            reduce using rule 4 (block -> INDENT statementlist DEDENT .)
    IMPORT          reduce using rule 4 (block -> INDENT statementlist DEDENT .)
    DEF             reduce using rule 4 (block -> INDENT statementlist DEDENT .)
    YIELD           reduce using rule 4 (block -> INDENT statementlist DEDENT .)
    PASS            reduce using rule 4 (block -> INDENT statementlist DEDENT .)
    IDENTIFIER      reduce using rule 4 (block -> INDENT statementlist DEDENT .)
    NOT             reduce using rule 4 (block -> INDENT statementlist DEDENT .)
    PARENL          reduce using rule 4 (block -> INDENT statementlist DEDENT .)
    NUMBER          reduce using rule 4 (block -> INDENT statementlist DEDENT .)
    MINUS           reduce using rule 4 (block -> INDENT statementlist DEDENT .)
    STRING          reduce using rule 4 (block -> INDENT statementlist DEDENT .)
    TRUE            reduce using rule 4 (block -> INDENT statementlist DEDENT .)
    FALSE           reduce using rule 4 (block -> INDENT statementlist DEDENT .)
    $end            reduce using rule 4 (block -> INDENT statementlist DEDENT .)
    DEDENT          reduce using rule 4 (block -> INDENT statementlist DEDENT .)
    ELSE            reduce using rule 4 (block -> INDENT statementlist DEDENT .)
    ELIF            reduce using rule 4 (block -> INDENT statementlist DEDENT .)


state 115

    (41) def_statement -> DEF identifier PARENL PARENR COLON EOL block .

    EOL             reduce using rule 41 (def_statement -> DEF identifier PARENL PARENR COLON EOL block .)
    PRINT           reduce using rule 41 (def_statement -> DEF identifier PARENL PARENR COLON EOL block .)
    WHILE           reduce using rule 41 (def_statement -> DEF identifier PARENL PARENR COLON EOL block .)
    IF              reduce using rule 41 (def_statement -> DEF identifier PARENL PARENR COLON EOL block .)
    FOR             reduce using rule 41 (def_statement -> DEF identifier PARENL PARENR COLON EOL block .)
    FROM            reduce using rule 41 (def_statement -> DEF identifier PARENL PARENR COLON EOL block .)
    IMPORT          reduce using rule 41 (def_statement -> DEF identifier PARENL PARENR COLON EOL block .)
    DEF             reduce using rule 41 (def_statement -> DEF identifier PARENL PARENR COLON EOL block .)
    YIELD           reduce using rule 41 (def_statement -> DEF identifier PARENL PARENR COLON EOL block .)
    PASS            reduce using rule 41 (def_statement -> DEF identifier PARENL PARENR COLON EOL block .)
    IDENTIFIER      reduce using rule 41 (def_statement -> DEF identifier PARENL PARENR COLON EOL block .)
    NOT             reduce using rule 41 (def_statement -> DEF identifier PARENL PARENR COLON EOL block .)
    PARENL          reduce using rule 41 (def_statement -> DEF identifier PARENL PARENR COLON EOL block .)
    NUMBER          reduce using rule 41 (def_statement -> DEF identifier PARENL PARENR COLON EOL block .)
    MINUS           reduce using rule 41 (def_statement -> DEF identifier PARENL PARENR COLON EOL block .)
    STRING          reduce using rule 41 (def_statement -> DEF identifier PARENL PARENR COLON EOL block .)
    TRUE            reduce using rule 41 (def_statement -> DEF identifier PARENL PARENR COLON EOL block .)
    FALSE           reduce using rule 41 (def_statement -> DEF identifier PARENL PARENR COLON EOL block .)
    $end            reduce using rule 41 (def_statement -> DEF identifier PARENL PARENR COLON EOL block .)
    DEDENT          reduce using rule 41 (def_statement -> DEF identifier PARENL PARENR COLON EOL block .)


state 116

    (42) def_statement -> DEF identifier PARENL ident_list PARENR COLON EOL . block
    (4) block -> . INDENT statementlist DEDENT

    INDENT          shift and go to state 95

    block                          shift and go to state 121

state 117

    (40) for_statement -> FOR identifier IN fullexpression COLON EOL block .

    EOL             reduce using rule 40 (for_statement -> FOR identifier IN fullexpression COLON EOL block .)
    PRINT           reduce using rule 40 (for_statement -> FOR identifier IN fullexpression COLON EOL block .)
    WHILE           reduce using rule 40 (for_statement -> FOR identifier IN fullexpression COLON EOL block .)
    IF              reduce using rule 40 (for_statement -> FOR identifier IN fullexpression COLON EOL block .)
    FOR             reduce using rule 40 (for_statement -> FOR identifier IN fullexpression COLON EOL block .)
    FROM            reduce using rule 40 (for_statement -> FOR identifier IN fullexpression COLON EOL block .)
    IMPORT          reduce using rule 40 (for_statement -> FOR identifier IN fullexpression COLON EOL block .)
    DEF             reduce using rule 40 (for_statement -> FOR identifier IN fullexpression COLON EOL block .)
    YIELD           reduce using rule 40 (for_statement -> FOR identifier IN fullexpression COLON EOL block .)
    PASS            reduce using rule 40 (for_statement -> FOR identifier IN fullexpression COLON EOL block .)
    IDENTIFIER      reduce using rule 40 (for_statement -> FOR identifier IN fullexpression COLON EOL block .)
    NOT             reduce using rule 40 (for_statement -> FOR identifier IN fullexpression COLON EOL block .)
    PARENL          reduce using rule 40 (for_statement -> FOR identifier IN fullexpression COLON EOL block .)
    NUMBER          reduce using rule 40 (for_statement -> FOR identifier IN fullexpression COLON EOL block .)
    MINUS           reduce using rule 40 (for_statement -> FOR identifier IN fullexpression COLON EOL block .)
    STRING          reduce using rule 40 (for_statement -> FOR identifier IN fullexpression COLON EOL block .)
    TRUE            reduce using rule 40 (for_statement -> FOR identifier IN fullexpression COLON EOL block .)
    FALSE           reduce using rule 40 (for_statement -> FOR identifier IN fullexpression COLON EOL block .)
    $end            reduce using rule 40 (for_statement -> FOR identifier IN fullexpression COLON EOL block .)
    DEDENT          reduce using rule 40 (for_statement -> FOR identifier IN fullexpression COLON EOL block .)


state 118

    (32) elif_clause -> ELIF fullexpression . COLON EOL block

    COLON           shift and go to state 122


state 119

    (30) elif_clauses -> elif_clause if_trailer .

    EOL             reduce using rule 30 (elif_clauses -> elif_clause if_trailer .)
    PRINT           reduce using rule 30 (elif_clauses -> elif_clause if_trailer .)
    WHILE           reduce using rule 30 (elif_clauses -> elif_clause if_trailer .)
    IF              reduce using rule 30 (elif_clauses -> elif_clause if_trailer .)
    FOR             reduce using rule 30 (elif_clauses -> elif_clause if_trailer .)
    FROM            reduce using rule 30 (elif_clauses -> elif_clause if_trailer .)
    IMPORT          reduce using rule 30 (elif_clauses -> elif_clause if_trailer .)
    DEF             reduce using rule 30 (elif_clauses -> elif_clause if_trailer .)
    YIELD           reduce using rule 30 (elif_clauses -> elif_clause if_trailer .)
    PASS            reduce using rule 30 (elif_clauses -> elif_clause if_trailer .)
    IDENTIFIER      reduce using rule 30 (elif_clauses -> elif_clause if_trailer .)
    NOT             reduce using rule 30 (elif_clauses -> elif_clause if_trailer .)
    PARENL          reduce using rule 30 (elif_clauses -> elif_clause if_trailer .)
    NUMBER          reduce using rule 30 (elif_clauses -> elif_clause if_trailer .)
    MINUS           reduce using rule 30 (elif_clauses -> elif_clause if_trailer .)
    STRING          reduce using rule 30 (elif_clauses -> elif_clause if_trailer .)
    TRUE            reduce using rule 30 (elif_clauses -> elif_clause if_trailer .)
    FALSE           reduce using rule 30 (elif_clauses -> elif_clause if_trailer .)
    $end            reduce using rule 30 (elif_clauses -> elif_clause if_trailer .)
    DEDENT          reduce using rule 30 (elif_clauses -> elif_clause if_trailer .)


state 120

    (33) else_clause -> ELSE COLON . EOL block

    EOL             shift and go to state 123


state 121

    (42) def_statement -> DEF identifier PARENL ident_list PARENR COLON EOL block .

    EOL             reduce using rule 42 (def_statement -> DEF identifier PARENL ident_list PARENR COLON EOL block .)
    PRINT           reduce using rule 42 (def_statement -> DEF identifier PARENL ident_list PARENR COLON EOL block .)
    WHILE           reduce using rule 42 (def_statement -> DEF identifier PARENL ident_list PARENR COLON EOL block .)
    IF              reduce using rule 42 (def_statement -> DEF identifier PARENL ident_list PARENR COLON EOL block .)
    FOR             reduce using rule 42 (def_statement -> DEF identifier PARENL ident_list PARENR COLON EOL block .)
    FROM            reduce using rule 42 (def_statement -> DEF identifier PARENL ident_list PARENR COLON EOL block .)
    IMPORT          reduce using rule 42 (def_statement -> DEF identifier PARENL ident_list PARENR COLON EOL block .)
    DEF             reduce using rule 42 (def_statement -> DEF identifier PARENL ident_list PARENR COLON EOL block .)
    YIELD           reduce using rule 42 (def_statement -> DEF identifier PARENL ident_list PARENR COLON EOL block .)
    PASS            reduce using rule 42 (def_statement -> DEF identifier PARENL ident_list PARENR COLON EOL block .)
    IDENTIFIER      reduce using rule 42 (def_statement -> DEF identifier PARENL ident_list PARENR COLON EOL block .)
    NOT             reduce using rule 42 (def_statement -> DEF identifier PARENL ident_list PARENR COLON EOL block .)
    PARENL          reduce using rule 42 (def_statement -> DEF identifier PARENL ident_list PARENR COLON EOL block .)
    NUMBER          reduce using rule 42 (def_statement -> DEF identifier PARENL ident_list PARENR COLON EOL block .)
    MINUS           reduce using rule 42 (def_statement -> DEF identifier PARENL ident_list PARENR COLON EOL block .)
    STRING          reduce using rule 42 (def_statement -> DEF identifier PARENL ident_list PARENR COLON EOL block .)
    TRUE            reduce using rule 42 (def_statement -> DEF identifier PARENL ident_list PARENR COLON EOL block .)
    FALSE           reduce using rule 42 (def_statement -> DEF identifier PARENL ident_list PARENR COLON EOL block .)
    $end            reduce using rule 42 (def_statement -> DEF identifier PARENL ident_list PARENR COLON EOL block .)
    DEDENT          reduce using rule 42 (def_statement -> DEF identifier PARENL ident_list PARENR COLON EOL block .)


state 122

    (32) elif_clause -> ELIF fullexpression COLON . EOL block

    EOL             shift and go to state 124


state 123

    (33) else_clause -> ELSE COLON EOL . block
    (4) block -> . INDENT statementlist DEDENT

    INDENT          shift and go to state 95

    block                          shift and go to state 125

state 124

    (32) elif_clause -> ELIF fullexpression COLON EOL . block
    (4) block -> . INDENT statementlist DEDENT

    INDENT          shift and go to state 95

    block                          shift and go to state 126

state 125

    (33) else_clause -> ELSE COLON EOL block .

    EOL             reduce using rule 33 (else_clause -> ELSE COLON EOL block .)
    PRINT           reduce using rule 33 (else_clause -> ELSE COLON EOL block .)
    WHILE           reduce using rule 33 (else_clause -> ELSE COLON EOL block .)
    IF              reduce using rule 33 (else_clause -> ELSE COLON EOL block .)
    FOR             reduce using rule 33 (else_clause -> ELSE COLON EOL block .)
    FROM            reduce using rule 33 (else_clause -> ELSE COLON EOL block .)
    IMPORT          reduce using rule 33 (else_clause -> ELSE COLON EOL block .)
    DEF             reduce using rule 33 (else_clause -> ELSE COLON EOL block .)
    YIELD           reduce using rule 33 (else_clause -> ELSE COLON EOL block .)
    PASS            reduce using rule 33 (else_clause -> ELSE COLON EOL block .)
    IDENTIFIER      reduce using rule 33 (else_clause -> ELSE COLON EOL block .)
    NOT             reduce using rule 33 (else_clause -> ELSE COLON EOL block .)
    PARENL          reduce using rule 33 (else_clause -> ELSE COLON EOL block .)
    NUMBER          reduce using rule 33 (else_clause -> ELSE COLON EOL block .)
    MINUS           reduce using rule 33 (else_clause -> ELSE COLON EOL block .)
    STRING          reduce using rule 33 (else_clause -> ELSE COLON EOL block .)
    TRUE            reduce using rule 33 (else_clause -> ELSE COLON EOL block .)
    FALSE           reduce using rule 33 (else_clause -> ELSE COLON EOL block .)
    $end            reduce using rule 33 (else_clause -> ELSE COLON EOL block .)
    DEDENT          reduce using rule 33 (else_clause -> ELSE COLON EOL block .)


state 126

    (32) elif_clause -> ELIF fullexpression COLON EOL block .

    ELSE            reduce using rule 32 (elif_clause -> ELIF fullexpression COLON EOL block .)
    ELIF            reduce using rule 32 (elif_clause -> ELIF fullexpression COLON EOL block .)
    EOL             reduce using rule 32 (elif_clause -> ELIF fullexpression COLON EOL block .)
    PRINT           reduce using rule 32 (elif_clause -> ELIF fullexpression COLON EOL block .)
    WHILE           reduce using rule 32 (elif_clause -> ELIF fullexpression COLON EOL block .)
    IF              reduce using rule 32 (elif_clause -> ELIF fullexpression COLON EOL block .)
    FOR             reduce using rule 32 (elif_clause -> ELIF fullexpression COLON EOL block .)
    FROM            reduce using rule 32 (elif_clause -> ELIF fullexpression COLON EOL block .)
    IMPORT          reduce using rule 32 (elif_clause -> ELIF fullexpression COLON EOL block .)
    DEF             reduce using rule 32 (elif_clause -> ELIF fullexpression COLON EOL block .)
    YIELD           reduce using rule 32 (elif_clause -> ELIF fullexpression COLON EOL block .)
    PASS            reduce using rule 32 (elif_clause -> ELIF fullexpression COLON EOL block .)
    IDENTIFIER      reduce using rule 32 (elif_clause -> ELIF fullexpression COLON EOL block .)
    NOT             reduce using rule 32 (elif_clause -> ELIF fullexpression COLON EOL block .)
    PARENL          reduce using rule 32 (elif_clause -> ELIF fullexpression COLON EOL block .)
    NUMBER          reduce using rule 32 (elif_clause -> ELIF fullexpression COLON EOL block .)
    MINUS           reduce using rule 32 (elif_clause -> ELIF fullexpression COLON EOL block .)
    STRING          reduce using rule 32 (elif_clause -> ELIF fullexpression COLON EOL block .)
    TRUE            reduce using rule 32 (elif_clause -> ELIF fullexpression COLON EOL block .)
    FALSE           reduce using rule 32 (elif_clause -> ELIF fullexpression COLON EOL block .)
    $end            reduce using rule 32 (elif_clause -> ELIF fullexpression COLON EOL block .)
    DEDENT          reduce using rule 32 (elif_clause -> ELIF fullexpression COLON EOL block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PARENL in state 31 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 40 resolved as shift
